{"version":3,"sources":["forms/form-table/form-table.scss","init/_colors.scss","forms/form-table/form-table.css","../node_modules/chroma-sass/sass/chroma/_internals.scss"],"names":[],"mappings":"AAeE;;EACE,eAAe;EACf,kBAAkB;EAClB,aAAa;EACb,yBCK6B;AClBjC;;AFSG;;EAQG,mBAAmB;AEZzB;;AFgBE;;;EACE,gCGqHmD;EHpHnD,kBAAkB;EAClB,gBAAgB;AEXpB;;AAEA;;EFYM,iBAAiB;EACjB,iBAAiB;EACjB,gBAAgB;AETtB;;AFaE;;;EACE,6BGyGmD;ADjHvD;;AFWE;;;EACE,kBAAkB;EAClB,gCGoGmD;EHnGnD,uBGmGmD;ADzGvD;;AFGG;;;EAMG,yBCzB2B;ACsBjC;;AFHG;;;;EAWG,yBAAiD;AEDvD;;AFVG;;;;EAgBG,mBGsFiD;ADrFvD;;AFjBG;;;;EAqBG,iBGiFiD;AD9EvD;;AFCE;;;EACE,SAAS;AEIb;;AFDE;;;;;EAEE,uBAAuB;EACvB,0BAA0B;EAC1B,kBAAkB;AEOtB","file":"form-table.css","sourcesContent":["@import 'init';\n\n// Drupal admin tables\n//\n// Complex forms that appear in html `<table>` elements.\n//\n// If your custom theme isn't used for Drupal's admin pages, you can safely\n// delete this component to save file weight in the generated CSS.\n//\n// Markup: form-table.twig\n//\n// Style guide: forms.form-table\n\n.form-table,\n%form-table {\n  &__sticky-header {\n    position: fixed;\n    visibility: hidden;\n    margin-top: 0;\n    background-color: color(body-bg);\n\n    &.is-sticky,\n    &--is-sticky {\n      visibility: visible;\n    }\n  }\n\n  &__header {\n    border-bottom: 3px solid color(border);\n    padding-right: 1em;\n    text-align: left;\n\n    @include rtl() {\n      text-align: right;\n      padding-left: 1em;\n      padding-right: 0;\n    }\n  }\n\n  &__body {\n    border-top: 1px solid color(border);\n  }\n\n  &__row {\n    padding: .1em .6em;\n    border-bottom: 1px solid color(border);\n    background-color: color(row-stripe);\n\n    &:nth-child(even) {\n      background-color: color(body-bg);\n    }\n\n    &.is-active,\n    &--is-active {\n      background-color: darken(color(row-stripe), 6.8%);\n    }\n\n    &.is-disabled,\n    &--is-disabled {\n      background: color(row-disabled);\n    }\n\n    &.is-selected,\n    &--is-selected {\n      background: color(table-select);\n    }\n  }\n\n  &__list {\n    margin: 0;\n  }\n\n  &__narrow-column {\n    // sass-lint:disable no-vendor-prefixes, no-duplicate-properties\n    width: -moz-min-content;\n    width: -webkit-min-content;\n    text-align: center;\n  }\n\n  // Automatically set styles on child HTML structure.\n  th {\n    @extend %form-table__header;\n\n    // Override specificity. :-p\n    &.form-table__narrow-column {\n      @extend %form-table__narrow-column;\n    }\n  }\n\n  tbody {\n    @extend %form-table__body;\n\n    tr {\n      @extend %form-table__row;\n    }\n  }\n\n  ul {\n    @extend %form-table__list;\n  }\n}\n\n//\n// Drupal selectors.\n//\n\n.sticky-header {\n  @extend %form-table__sticky-header;\n}\n\nform table {\n  @extend %form-table;\n}\n\ntd,\nth {\n  .checkbox {\n    @extend %form-table__narrow-column;\n  }\n}\n\n// Markup generated by theme_tablesort_indicator().\ntd.active {\n  @extend %form-table__row--is-active;\n}\n\ntd.menu-disabled {\n  @extend %form-table__row--is-disabled;\n}\n\n// TableSelect behavior.\ntr.selected td {\n  @extend %form-table__row--is-selected;\n}\n","// sass-lint:disable indentation, no-color-keywords\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. To learn more,\n// [read the Chroma documentation](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma.twig\n//\n// Weight: -1\n//\n// Style guide: sass.colors\n\n// Define the default color scheme's color names.\n$chroma: define-default-color-scheme('branding', 'The site\\'s main colors. Can be used to define colors in other color schemes.');\n\n$chroma: add-colors((\n  black:                  #111,\n  grey-dark:              ('black' lighten 40%),\n  'grey':                 ('black' lighten 60%),\n  grey-light:             ('black' lighten 80%),\n  grey-extra-light:       ('black' lighten 93.33%),\n  white:                  rgb(240, 240, 240),\n\n  dark-purple:            #201c29,\n  blue:                   #1b7ebb,\n  red:                    rgb(228, 24, 24),\n  yellow:                 rgb(255, 228, 55),\n));\n\n// Define color names for functional uses.\n$chroma: define-color-scheme('functional', 'Colors used by functional parts of the design.');\n$chroma: add-colors('functional', (\n  // Colors used in the main content area.\n  text:                   'white',\n  text-bg:                'dark-purple',\n\n  link:                   'white',\n  link-visited:           ('white' darken 20%),\n  link-active:            'yellow',\n\n  border:                 'grey-light',\n\n  autocomplete:           'black',\n  autocomplete-bg:        'white',\n  autocomplete-select:    'white',\n  autocomplete-select-bg: 'blue',\n\n  body-bg:                'text-bg',\n\n  button:                 'text',\n  button-disabled:        'grey',\n\n  fieldset-summary:       'grey',\n  form-error:             'red',\n\n  mark-highlight:         'red',\n  mark-bg:                'yellow',\n\n  menu-active:            'text',\n\n  preview-bg:             ('yellow' lighten 43%),\n\n  progress-bar:           'blue',\n  progress-bar-bg:        'grey-light',\n  progress-bar-border:    'grey-dark',\n\n  resizable-grippie:      'grey-extra-light',\n\n  row-stripe:             'grey-extra-light',\n  row-disabled:           'grey-light',\n\n  skip-link:              'white',\n  skip-link-bg:           'grey-dark',\n\n  status:                 'blue',\n  status-bg:              (status lighten 62%),\n  status-highlight:       text,\n  warning:                text,\n  warning-bg:             ('yellow' lighten 45%),\n  warning-border:         'yellow',\n  error:                  'red',\n  error-bg:               (error lighten 57%),\n\n  tabs-border:            'border',\n  tabs-bg:                'text-bg',\n  tab:                    'text',\n  tab-text-shadow:        'white',\n  tab-bg:                 ('grey-light' lighten 6.66%),\n  tab-secondary:          'grey-dark',\n\n  table-drag:             ('yellow' lighten 43%),\n  table-select:           ('yellow' lighten 47%),\n\n  watermark:              'grey-extra-light',\n));\n\n$chroma-active-scheme: 'functional';\n",".form-table__sticky-header,\n.sticky-header {\n  position: fixed;\n  visibility: hidden;\n  margin-top: 0;\n  background-color: #201c29;\n}\n\n.form-table__sticky-header.is-sticky, .form-table__sticky-header--is-sticky,\n.is-sticky.sticky-header {\n  visibility: visible;\n}\n\n.form-table__header,\n.form-table th,\nform table th {\n  border-bottom: 3px solid #dddddd;\n  padding-right: 1em;\n  text-align: left;\n}\n\n[dir=\"rtl\"] .form-table__header, [dir=\"rtl\"] .form-table th, .form-table [dir=\"rtl\"] th,\n[dir=\"rtl\"] form table th, form table [dir=\"rtl\"] th {\n  text-align: right;\n  padding-left: 1em;\n  padding-right: 0;\n}\n\n.form-table__body,\n.form-table tbody,\nform table tbody {\n  border-top: 1px solid #dddddd;\n}\n\n.form-table__row,\n.form-table tbody tr,\nform table tbody tr {\n  padding: .1em .6em;\n  border-bottom: 1px solid #dddddd;\n  background-color: white;\n}\n\n.form-table__row:nth-child(even),\n.form-table tbody tr:nth-child(even),\nform table tbody tr:nth-child(even) {\n  background-color: #201c29;\n}\n\n.form-table__row.is-active, .form-table__row--is-active,\n.form-table tbody tr.is-active,\nform table tbody tr.is-active,\ntd.active {\n  background-color: #eeeeee;\n}\n\n.form-table__row.is-disabled, .form-table__row--is-disabled,\n.form-table tbody tr.is-disabled,\nform table tbody tr.is-disabled,\ntd.menu-disabled {\n  background: #dddddd;\n}\n\n.form-table__row.is-selected, .form-table__row--is-selected,\n.form-table tbody tr.is-selected,\nform table tbody tr.is-selected,\ntr.selected td {\n  background: white;\n}\n\n.form-table__list,\n.form-table ul,\nform table ul {\n  margin: 0;\n}\n\n.form-table__narrow-column,\n.form-table th.form-table__narrow-column,\nform table th.form-table__narrow-column,\ntd .checkbox,\nth .checkbox {\n  width: -moz-min-content;\n  width: -webkit-min-content;\n  text-align: center;\n}\n","// Internals\n//\n// Helper functions that query the internal data structure in $chroma. These are\n// not part of the public API and are subject to change at any time.\n//\n// Weight: 10\n//\n// Style guide: internals\n\n// Import the global variables needed by all of Chroma.\n@import './variables';\n\n// chroma-has-scheme($scheme)\n//\n// Checks if the named color scheme exists.\n//\n// Style guide: internals.chroma-has-scheme\n@function chroma-has-scheme($scheme) {\n  @return map-has-key(map-get($chroma, 'schemes'), $scheme);\n}\n\n// chroma-schemes()\n//\n// Returns a list of all color schemes in $chroma.\n//\n// Style guide: internals.chroma-schemes\n@function chroma-schemes() {\n  @return map-keys(map-get($chroma, 'schemes'));\n}\n\n// chroma-has-color($name [, $scheme])\n//\n// Checks if the named color exists in the given scheme or its parent schemes.\n// Returns false or a string of the scheme name that contains the color.\n//\n// Style guide: internals.chroma-has-color\n@function chroma-has-color($name, $scheme: $chroma-active-scheme) {\n  $current-scheme: $scheme;\n  @while $current-scheme {\n    @if map-has-key(map-get($chroma, 'names'), \"#{$current-scheme}::#{$name}\") {\n      @return $current-scheme;\n    }\n    // Look in the parent scheme.\n    $current-scheme: map-get(map-get(map-get($chroma, 'schemes'), $current-scheme), 'parent');\n  }\n  @return false;\n}\n\n// _chroma-add-name()\n//\n// Private function that adds a color to the data structure of the $chroma\n// variable.\n//\n// Style guide: internals._chroma-add-name\n@function _chroma-add-name($scheme, $name, $value: false, $reference: false, $referenced_by: (), $function: false, $parameters: ()) {\n  $names: map-merge(\n    map-get($chroma, 'names'),\n    (\"#{$scheme}::#{$name}\": (\n      value         : $value,\n      reference     : $reference,\n      referenced_by : $referenced_by,\n      function      : $function,\n      parameters    : $parameters,\n    ))\n  );\n\n  @return map-merge(\n    $chroma,\n    ('names': $names)\n  );\n}\n\n// _chroma-init()\n//\n// Private function that sets up the initial data structure of the $chroma\n// variable. Can be called repeatedly without damaging existing data.\n//\n// Style guide: internals._chroma-init\n@function _chroma-init() {\n  @if length($chroma) == 0 {\n    @return (\n      'schemes': (\n        $CHROMA_DEFAULT_SCHEME : (\n          'description': '',\n          'parent': false,\n        ),\n      ),\n      'skins': (),\n      'names': (),\n    );\n  }\n  @else {\n    @return $chroma;\n  }\n}\n\n// is-old-libsass()\n//\n// libsass before 3.3.0 is funky, making it very hard for Chroma to do its job.\n//\n// - `inspect([color])` returns the original value instead of returning the\n//   string equivalent, so you can't cast a color to a string.\n// - `type-of('[color keyword]')` thinks that these strings are colors.\n// - `map-has-key()` works properly, thankfully. So:\n//   - `map-has-key((white: ''), white)` correctly returns `true`\n//   - `map-has-key(('white': ''), 'white')` correctly returns `true`\n//   - `map-has-key((white: ''), 'white')` correctly returns `false`\n//   - `map-has-key(('white': ''), white)` correctly returns `false`\n//   This means we can cobble together a replacement for `type-of()`. And a\n//   partial replacement for `inspect()` that works for everything except\n//   dangerous color keywords.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-old-libsass\n@function _is-old-libsass() {\n  @return if(type-of('white') == 'color', true, false);\n}\n\n// _is-keyword-string($name)\n//\n// Normally, `type-of()` can be used to tell if a given value is a string. But\n// LibSass versions before 3.3.0 think that color keywords in strings are still\n// colors and not strings. This function works, regardless of LibSass bugs.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-keyword-string\n@function _is-keyword-string($name) {\n  @return if(map-has-key($_chroma-css4-color-keywords-in-strings, $name), true, false);\n}\n\n// _safe-call()\n//\n// LibSass incorrectly throws an error when using the variable argument\n// indicator, ..., with an overloaded function; e.g. rgba(). To work-around this\n// bug, we call rgba() with direct parameters.\n//\n// @TODO: Remove when the fix for https://github.com/sass/libsass/issues/2205 is released.\n//\n// Style guide: internals._safe-call\n@function _safe-call($function, $parameters...) {\n  @if $function == rgba {\n    @return rgba(nth($parameters, 1), nth($parameters, 2));\n  }\n  @return call(get-function($function), $parameters...);\n}\n"]}