{"version":3,"sources":["navigation/tabs/tabs.scss","../node_modules/typey/stylesheets/typey/mixins/_spacing.scss","../node_modules/typey/stylesheets/typey/functions/_helpers.scss","../node_modules/typey/stylesheets/typey/mixins/_line-height.scss","navigation/tabs/tabs.css","../node_modules/chroma-sass/sass/chroma/_internals.scss","init/_colors.scss","../node_modules/typey/stylesheets/typey/mixins/_font-size.scss","init/_variables.scss"],"names":[],"mappings":"AAqBA;ECuBE,oBCnCW;ECYX,qBDTwB;EFkBtB,sCAAiD;EAEnD,uEAAkF;EAClF,cAAc;EACd,gBAAgB;EAChB,mBAAmB;AI3BrB;;AJ6BE;EAhBF;IAiBI,aAAa;EIzBf;AACF;;AJ2BE;EACE,WAAW;EACX,aAAa;EACb,yBKqGmD;ELpGnD,2BAA2B;EAC3B,4BAA4B;EAE5B,gCAAgC;EAG9B,sBAAsB;EAGxB,gBAAgB;EAChB,mBK0FmD;ADvHvD;;AAEA;EJ8BM,YAAY;AI5BlB;;AJWG;EAsBG,4BMvC2B;AFUjC;;AJiCE;ECvBA,iBChCwB;EFyDtB,cAAc;EACd,qBAAqB;EACrB,iDAAiD;EACjD,4BAA2C;EAE3C,cMpDwC;ENqDxC,mBKsEmD;ELrEnD,mBAAmB;AI/BvB;;AJsBG;EAaG,mBAAsC;AI/B5C;;AJkBG;EAmBG,mBM9D2B;EN+D3B,iBAAiB;AIjCvB;;AJqCE;EC/CA,kBChCwB;EKUxB,mBLVwB;EFkFtB,sBAAsB;AIlC1B;;AJvCA;;ECuBE,aCnCW;EF4FT,uEAAkF;AInCtF;;AJsCE;EC5DA,2BChCwB;EF8FtB,SAAS;EACT,uBAAuB;AInC3B;;AAEA;EJoCM,YAAY;AIlClB;;AJ4BG;EAUG,gCAAgC;AIlCtC;;AJsCE;EACE,yBK0BmD;ELzBnD,mBQjFoB;ERkFpB,cKwBmD;ELvBnD,iBAAsC;EACtC,sBAAsB;AInC1B;;AJ8BG;EASG,cAAwC;EACxC,mBKiBiD;ELhBjD,qBAA0C;AInChD;;AJwBG;EAiBG,YAAkC;EAClC,4BAAsD;EACtD,mBKQiD;ELPjD,qBAA+C;AIrCrD","file":"tabs.css","sourcesContent":["@import 'init';\n\n// Tabs\n//\n// The primary and secondary tabs.\n//\n// Markup: tabs.twig\n//\n// .tabs--secondary - Secondary tabs\n//\n// Style guide: navigation.tabs\n\n// Tabs (stacked)\n//\n// When the secondary tabs appear directly after the primary tabs, the styling\n// is slightly different.\n//\n// Markup: tabs--stacked.twig\n//\n// Style guide: navigation.tabs.stacked\n\n.tabs,\n%tabs {\n  // The line height of a tab.\n  $tab-height: 1.25;\n\n  @include margin((2 - $tab-height) 0 0);\n  @include line-height($tab-height);\n  @if support-for(ie, 9) {\n    // IE 9 and earlier don't understand gradients.\n    border-bottom: 1px solid color(tabs-border) \\0/ie;\n  }\n  background-image: linear-gradient(to top, color(tabs-border) 1px, transparent 1px);\n  padding: 0 2px;\n  list-style: none;\n  white-space: nowrap;\n\n  @media print {\n    display: none;\n  }\n\n  &__tab {\n    float: left;\n    margin: 0 3px;\n    border: 1px solid color(tabs-border);\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n    // Allow the tabs gradient to appear just below the tab.\n    border-bottom-color: transparent;\n    @if support-for(ie, 9) {\n      // IE 9 and earlier don't understand gradients.\n      border-bottom: 0 \\0/ie;\n    }\n    // Clip the background colors on tab links.\n    overflow: hidden;\n    background: color(tab-bg);\n\n    @include rtl() {\n      float: right;\n    }\n\n    &.is-active {\n      // Cover the tabs gradient with the same color as the background.\n      border-bottom-color: color(tabs-bg);\n    }\n  }\n\n  &__tab-link {\n    @include padding(0 1);\n    display: block;\n    text-decoration: none;\n    transition: color .3s, background .3s, border .3s;\n    text-shadow: color(tab-text-shadow) 0 1px 0;\n\n    color: color(tab);\n    background: color(tab-bg);\n    letter-spacing: 1px;\n\n    &:focus,\n    &:hover {\n      background: lighten(color(tab-bg), 5%);\n    }\n\n    &:active,\n    &.is-active,\n    &--is-active {\n      background: color(tabs-bg);\n      text-shadow: none;\n    }\n  }\n\n  &--secondary {\n    @include margin-top(1);\n    @include font-size(s);\n    background-image: none;\n  }\n\n  // When secondary tabs appear directly after primary tabs.\n  & + &--secondary,\n  & + h2 + &--secondary {\n    @include margin-top(0);\n    background-image: linear-gradient(to top, color(tabs-border) 1px, transparent 1px);\n  }\n\n  &--secondary &__tab {\n    @include margin((2 - $tab-height)/2 3px);\n    border: 0;\n    background: transparent;\n\n    @include rtl() {\n      float: right;\n    }\n\n    &.is-active {\n      border-bottom-color: transparent;\n    }\n  }\n\n  &--secondary &__tab-link {\n    border: 1px solid color(tabs-border);\n    border-radius: $base-line-height;\n    color: color(tab-secondary);\n    background: lighten(color(tab-bg), 8%);\n    letter-spacing: normal;\n\n    &:focus,\n    &:hover {\n      color: darken(color(tab-secondary), 20%);\n      background: color(tab-bg);\n      border-color: darken(color(tab-bg), 26.5%);\n    }\n\n    &:active,\n    &.is-active,\n    &--is-active {\n      color: lighten(color(tab-bg), 15%);\n      text-shadow: darken(color(tab-secondary), 20%) 0 1px 0;\n      background: color(tab-secondary);\n      border-color: darken(color(tab-secondary), 40%);\n    }\n  }\n}\n","// Define spacing (with fallbacks).\n//\n// @param string $type\n//   The type of spacing: margin, padding, margin-top, etc.\n// @param number|list|string $spacing\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin spacing($property, $spacing, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\", \"list\";\n  $type: typey-validator($spacing, $allowed-types);\n\n  $px-fallback-list: ();\n  $converted-list: ();\n\n  @each $x in $spacing {\n    @if $base-unit == rem {\n      $allowed-types: \"multiplier\", \"px\", \"auto\";\n      $type: typey-validator($x, $allowed-types);\n      @if $type == \"multiplier\" {\n        $spacing: $x * $base-line-height;\n        $px-fallback-list: join($px-fallback-list, $spacing, $separator: space);\n      }\n      @if $type == \"px\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n      @if $type == \"auto\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n    }\n    $spacing: spacing($x, $context);\n    $converted-list: join($converted-list, $spacing, $separator: space);\n  }\n\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      #{$property}: $px-fallback-list;\n    }\n  }\n  #{$property}: $converted-list;\n}\n\n// Wrapper mixins for various spacing properties.\n// These can be used to provide easily sized spacing in the base unit.\n//\n// @param number|list|string $x\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin margin($x, $context: $base-font-size) {\n  @include spacing(margin, $x, $context);\n}\n@mixin margin-top($x, $context: $base-font-size) {\n  @include spacing(margin-top, $x, $context);\n}\n@mixin margin-bottom($x, $context: $base-font-size) {\n  @include spacing(margin-bottom, $x, $context);\n}\n@mixin margin-left($x, $context: $base-font-size) {\n  @include spacing(margin-left, $x, $context);\n}\n@mixin margin-right($x, $context: $base-font-size) {\n  @include spacing(margin-right, $x, $context);\n}\n@mixin padding($x, $context: $base-font-size) {\n  @include spacing(padding, $x, $context);\n}\n@mixin padding-top($x, $context: $base-font-size) {\n  @include spacing(padding-top, $x, $context);\n}\n@mixin padding-bottom($x, $context: $base-font-size) {\n  @include spacing(padding-bottom, $x, $context);\n}\n@mixin padding-left($x, $context: $base-font-size) {\n  @include spacing(padding-left, $x, $context);\n}\n@mixin padding-right($x, $context: $base-font-size) {\n  @include spacing(padding-right, $x, $context);\n}\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","// Define line-height (with fallback).\n//\n// @param number $x\n//   Multiple of line height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin line-height($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\";\n  $type: typey-validator($x, $allowed-types);\n  @if $base-unit == rem and $line-height-method == \"rhythm\" {\n    @if $rem-fallback == true {\n      @if $type == \"multiplier\" {\n        line-height: $x * $base-line-height;\n      }\n      @if $type == \"px\" {\n        line-height: $x;\n      }\n    }\n  }\n  line-height: line-height($x, $context);\n}\n",".tabs {\n  margin: 1.125rem 0 0;\n  line-height: 1.875rem;\n  border-bottom: 1px solid #dddddd \\0/ie;\n  background-image: linear-gradient(to top, #dddddd 1px, transparent 1px);\n  padding: 0 2px;\n  list-style: none;\n  white-space: nowrap;\n}\n\n@media print {\n  .tabs {\n    display: none;\n  }\n}\n\n.tabs__tab {\n  float: left;\n  margin: 0 3px;\n  border: 1px solid #dddddd;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n  border-bottom-color: transparent;\n  border-bottom: 0 \\0/ie;\n  overflow: hidden;\n  background: #eeeeee;\n}\n\n[dir=\"rtl\"] .tabs__tab {\n  float: right;\n}\n\n.tabs__tab.is-active {\n  border-bottom-color: #201c29;\n}\n\n.tabs__tab-link {\n  padding: 0 1.5rem;\n  display: block;\n  text-decoration: none;\n  transition: color .3s, background .3s, border .3s;\n  text-shadow: #f0f0f0 0 1px 0;\n  color: #f0f0f0;\n  background: #eeeeee;\n  letter-spacing: 1px;\n}\n\n.tabs__tab-link:focus, .tabs__tab-link:hover {\n  background: #fbfbfb;\n}\n\n.tabs__tab-link:active, .tabs__tab-link.is-active, .tabs__tab-link--is-active {\n  background: #201c29;\n  text-shadow: none;\n}\n\n.tabs--secondary {\n  margin-top: 1.5rem;\n  font-size: 0.875rem;\n  background-image: none;\n}\n\n.tabs + .tabs--secondary,\n.tabs + h2 + .tabs--secondary {\n  margin-top: 0;\n  background-image: linear-gradient(to top, #dddddd 1px, transparent 1px);\n}\n\n.tabs--secondary .tabs__tab {\n  margin: 0.5625rem 0.1875rem;\n  border: 0;\n  background: transparent;\n}\n\n[dir=\"rtl\"] .tabs--secondary .tabs__tab {\n  float: right;\n}\n\n.tabs--secondary .tabs__tab.is-active {\n  border-bottom-color: transparent;\n}\n\n.tabs--secondary .tabs__tab-link {\n  border: 1px solid #dddddd;\n  border-radius: 24px;\n  color: #777777;\n  background: white;\n  letter-spacing: normal;\n}\n\n.tabs--secondary .tabs__tab-link:focus, .tabs--secondary .tabs__tab-link:hover {\n  color: #444444;\n  background: #eeeeee;\n  border-color: #aaaaaa;\n}\n\n.tabs--secondary .tabs__tab-link:active, .tabs--secondary .tabs__tab-link.is-active, .tabs--secondary .tabs__tab-link--is-active {\n  color: white;\n  text-shadow: #444444 0 1px 0;\n  background: #777777;\n  border-color: #111111;\n}\n","// Internals\n//\n// Helper functions that query the internal data structure in $chroma. These are\n// not part of the public API and are subject to change at any time.\n//\n// Weight: 10\n//\n// Style guide: internals\n\n// Import the global variables needed by all of Chroma.\n@import './variables';\n\n// chroma-has-scheme($scheme)\n//\n// Checks if the named color scheme exists.\n//\n// Style guide: internals.chroma-has-scheme\n@function chroma-has-scheme($scheme) {\n  @return map-has-key(map-get($chroma, 'schemes'), $scheme);\n}\n\n// chroma-schemes()\n//\n// Returns a list of all color schemes in $chroma.\n//\n// Style guide: internals.chroma-schemes\n@function chroma-schemes() {\n  @return map-keys(map-get($chroma, 'schemes'));\n}\n\n// chroma-has-color($name [, $scheme])\n//\n// Checks if the named color exists in the given scheme or its parent schemes.\n// Returns false or a string of the scheme name that contains the color.\n//\n// Style guide: internals.chroma-has-color\n@function chroma-has-color($name, $scheme: $chroma-active-scheme) {\n  $current-scheme: $scheme;\n  @while $current-scheme {\n    @if map-has-key(map-get($chroma, 'names'), \"#{$current-scheme}::#{$name}\") {\n      @return $current-scheme;\n    }\n    // Look in the parent scheme.\n    $current-scheme: map-get(map-get(map-get($chroma, 'schemes'), $current-scheme), 'parent');\n  }\n  @return false;\n}\n\n// _chroma-add-name()\n//\n// Private function that adds a color to the data structure of the $chroma\n// variable.\n//\n// Style guide: internals._chroma-add-name\n@function _chroma-add-name($scheme, $name, $value: false, $reference: false, $referenced_by: (), $function: false, $parameters: ()) {\n  $names: map-merge(\n    map-get($chroma, 'names'),\n    (\"#{$scheme}::#{$name}\": (\n      value         : $value,\n      reference     : $reference,\n      referenced_by : $referenced_by,\n      function      : $function,\n      parameters    : $parameters,\n    ))\n  );\n\n  @return map-merge(\n    $chroma,\n    ('names': $names)\n  );\n}\n\n// _chroma-init()\n//\n// Private function that sets up the initial data structure of the $chroma\n// variable. Can be called repeatedly without damaging existing data.\n//\n// Style guide: internals._chroma-init\n@function _chroma-init() {\n  @if length($chroma) == 0 {\n    @return (\n      'schemes': (\n        $CHROMA_DEFAULT_SCHEME : (\n          'description': '',\n          'parent': false,\n        ),\n      ),\n      'skins': (),\n      'names': (),\n    );\n  }\n  @else {\n    @return $chroma;\n  }\n}\n\n// is-old-libsass()\n//\n// libsass before 3.3.0 is funky, making it very hard for Chroma to do its job.\n//\n// - `inspect([color])` returns the original value instead of returning the\n//   string equivalent, so you can't cast a color to a string.\n// - `type-of('[color keyword]')` thinks that these strings are colors.\n// - `map-has-key()` works properly, thankfully. So:\n//   - `map-has-key((white: ''), white)` correctly returns `true`\n//   - `map-has-key(('white': ''), 'white')` correctly returns `true`\n//   - `map-has-key((white: ''), 'white')` correctly returns `false`\n//   - `map-has-key(('white': ''), white)` correctly returns `false`\n//   This means we can cobble together a replacement for `type-of()`. And a\n//   partial replacement for `inspect()` that works for everything except\n//   dangerous color keywords.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-old-libsass\n@function _is-old-libsass() {\n  @return if(type-of('white') == 'color', true, false);\n}\n\n// _is-keyword-string($name)\n//\n// Normally, `type-of()` can be used to tell if a given value is a string. But\n// LibSass versions before 3.3.0 think that color keywords in strings are still\n// colors and not strings. This function works, regardless of LibSass bugs.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-keyword-string\n@function _is-keyword-string($name) {\n  @return if(map-has-key($_chroma-css4-color-keywords-in-strings, $name), true, false);\n}\n\n// _safe-call()\n//\n// LibSass incorrectly throws an error when using the variable argument\n// indicator, ..., with an overloaded function; e.g. rgba(). To work-around this\n// bug, we call rgba() with direct parameters.\n//\n// @TODO: Remove when the fix for https://github.com/sass/libsass/issues/2205 is released.\n//\n// Style guide: internals._safe-call\n@function _safe-call($function, $parameters...) {\n  @if $function == rgba {\n    @return rgba(nth($parameters, 1), nth($parameters, 2));\n  }\n  @return call(get-function($function), $parameters...);\n}\n","// sass-lint:disable indentation, no-color-keywords\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. To learn more,\n// [read the Chroma documentation](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma.twig\n//\n// Weight: -1\n//\n// Style guide: sass.colors\n\n// Define the default color scheme's color names.\n$chroma: define-default-color-scheme('branding', 'The site\\'s main colors. Can be used to define colors in other color schemes.');\n\n$chroma: add-colors((\n  black:                  #111,\n  grey-dark:              ('black' lighten 40%),\n  'grey':                 ('black' lighten 60%),\n  grey-light:             ('black' lighten 80%),\n  grey-extra-light:       ('black' lighten 93.33%),\n  white:                  rgb(240, 240, 240),\n\n  dark-purple:            #201c29,\n  blue:                   #1b7ebb,\n  red:                    rgb(228, 24, 24),\n  yellow:                 rgb(255, 228, 55),\n));\n\n// Define color names for functional uses.\n$chroma: define-color-scheme('functional', 'Colors used by functional parts of the design.');\n$chroma: add-colors('functional', (\n  // Colors used in the main content area.\n  text:                   'white',\n  text-bg:                'dark-purple',\n\n  link:                   'white',\n  link-visited:           ('white' darken 20%),\n  link-active:            'yellow',\n\n  border:                 'grey-light',\n\n  autocomplete:           'black',\n  autocomplete-bg:        'white',\n  autocomplete-select:    'white',\n  autocomplete-select-bg: 'blue',\n\n  body-bg:                'text-bg',\n\n  button:                 'text',\n  button-disabled:        'grey',\n\n  fieldset-summary:       'grey',\n  form-error:             'red',\n\n  mark-highlight:         'red',\n  mark-bg:                'yellow',\n\n  menu-active:            'text',\n\n  preview-bg:             ('yellow' lighten 43%),\n\n  progress-bar:           'blue',\n  progress-bar-bg:        'grey-light',\n  progress-bar-border:    'grey-dark',\n\n  resizable-grippie:      'grey-extra-light',\n\n  row-stripe:             'grey-extra-light',\n  row-disabled:           'grey-light',\n\n  skip-link:              'white',\n  skip-link-bg:           'grey-dark',\n\n  status:                 'blue',\n  status-bg:              (status lighten 62%),\n  status-highlight:       text,\n  warning:                text,\n  warning-bg:             ('yellow' lighten 45%),\n  warning-border:         'yellow',\n  error:                  'red',\n  error-bg:               (error lighten 57%),\n\n  tabs-border:            'border',\n  tabs-bg:                'text-bg',\n  tab:                    'text',\n  tab-text-shadow:        'white',\n  tab-bg:                 ('grey-light' lighten 6.66%),\n  tab-secondary:          'grey-dark',\n\n  table-drag:             ('yellow' lighten 43%),\n  table-select:           ('yellow' lighten 47%),\n\n  watermark:              'grey-extra-light',\n));\n\n$chroma-active-scheme: 'functional';\n","// Define font-size (with fallback)\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      @if $type == \"font-size\" {\n        $map-size: map-get($font-size, $size);\n        font-size: $map-size;\n      }\n      @if $type == \"px\" {\n        font-size: $size;\n      }\n    }\n  }\n  font-size: font-size($size, $context);\n}\n","// Variables\n//\n// Set variables for this site before a library sets its !default value.\n//\n// Style guide: sass.variables\n\n\n// Browser support\n//\n// For older versions of browsers, some Sass relies on the `support-for()` to\n// control whether extra CSS is needed to be output. The `support-for()`\n// function and the `$support-for` variable are documented on the [support-for\n// homepage](https://github.com/JohnAlbin/support-for).\n//\n// Style guide: sass.variables.support-for\n\n// Support the same browsers as normalize.css v3.\n// Possible keys: chrome, edge, firefox, ie, opera, safari, '*'\n$support-for: (\n  // IE 9-11\n  ie:  9,\n  // The last 4 versions of all other browsers.\n  '*': -4,\n);\n\n\n// Font faces, stacks and sizes.\n//\n// Font styling and line heights are controlled by the several variables that\n// used by mixins like `type-layout()`, `margin-top()`, and `margin-bottom()`.\n// These variable and mixins are documented on the [Typey\n// homepage](https://github.com/jptaranto/typey).\n//\n// Style guide: sass.variables.typey\n\n// The font size set on the root html element.\n$base-font-size:    16px;\n\n// The base line height determines the basic unit of vertical rhythm.\n$base-line-height:  24px;\n\n// The font sizes in our type hierarchy as tee shirt sizes.\n$font-size: (\n  xxl:              32px,\n  xl:               24px,\n  l:                20px,\n  m:                $base-font-size,\n  s:                14px,\n  xs:               10px\n);\n\n// Typey allows you to alter font weights site-wide with this map.\n$font-weight: (\n  bold:             700,\n  semiBold:         600,\n  medium:           500,\n  normal:           400,\n  light:            300\n);\n\n// The following font family declarations use widely available fonts.\n// A user's web browser will look at the comma-separated list and will\n// attempt to use each font in turn until it finds one that is available\n// on the user's computer. The final \"generic\" font (sans-serif, serif or\n// monospace) hints at what type of font to use if the web browser doesn't\n// find any of the fonts in the list.\n\n// Serif font stacks.\n$times-new-roman: 'Times New Roman', Times, Georgia, 'DejaVu Serif', serif;\n$times:           Times, 'Times New Roman', Georgia, 'DejaVu Serif', serif;\n$georgia:         Georgia, 'Times New Roman', 'DejaVu Serif', serif;\n\n// Sans-serif font stacks.\n$montserrat:          'Montserrat', Arial, Helvetica, 'Nimbus Sans L', sans-serif;\n$open-sans-sondensed: 'Open Sans Condensed', Arial, Helvetica, sans-serif;\n$verdana:             Verdana, Tahoma, 'DejaVu Sans', sans-serif;\n$tahoma:              Tahoma, Verdana, 'DejaVu Sans', sans-serif;\n$helvetica:           Helvetica, Arial, 'Nimbus Sans L', sans-serif;\n$arial:               Arial, Helvetica, 'Nimbus Sans L', sans-serif;\n$impact:              Impact, 'Arial Narrow', Helvetica, sans-serif;\n\n// Monospace font stacks.\n// For an explanation of why \"sans-serif\" is at the end of this list, see\n// http://meyerweb.com/eric/thoughts/2010/02/12/fixed-monospace-sizing/\n$menlo:           Menlo, 'DejaVu Sans Mono', 'Ubuntu Mono', Courier, 'Courier New', monospace, sans-serif;\n\n// The font faces you specify in the $typefaces map can be used in the\n// typeface() mixin.\n$typefaces: (\n  body: (\n    font-family: $montserrat,\n  ),\n  monospace: (\n    font-family: $menlo,\n  ),\n  compact: (\n    font-family: $open-sans-sondensed,\n    weight: bold,\n    case: uppercase,\n    letter-spacing: .5px,\n  ),\n);\n\n// Output a horizontal grid to help with debugging typography.\n$typey-debug: false;\n\n// The length unit in which to output font size and margin values.\n// Supported values: px, em, rem.\n$base-unit:         'rem';\n\n// px fallbacks for rem units are needed for IE 8 and earlier.\n$rem-fallback:      false;\n\n\n// Breakpoints\n//\n// Use the `respond-to()` mixin to use named breakpoints. Documentation is\n// available in the [Breakpoint wiki\n// pages](https://github.com/at-import/breakpoint/wiki/Respond-To).\n//\n// Style guide: sass.variables.breakpoints\n\n// Small phones (e.g. iPhone 5 - Portrait)\n@include add-breakpoint(iPhone5, (320px, 'no-query' true));\n// Small phones (e.g. iPhone 5 - Landscape)\n@include add-breakpoint(iPhone5Landscape, (480px, 'no-query' true));\n// Small phones (e.g. iPhone 5s - Landscape)\n@include add-breakpoint(iPhone5sLandscape, (568px, 'no-query' true));\n// Small phones (e.g. iPhone 6|7|8 - Landscape)\n@include add-breakpoint(iPhone8Landscape, (667px, 'no-query' true));\n// Small phones (e.g. iPhone 6|7|8Plus - Landscape)\n@include add-breakpoint(iPhone8PlusLandscape, (736px, 'no-query' true));\n@include add-breakpoint(iPhoneX, (834px, 'no-query' true));\n@include add-breakpoint(iPad, (834px, 'no-query' true));\n@include add-breakpoint(iPadLandscape, (1112px, 'no-query' true));\n@include add-breakpoint(iPadPro,  (1024px));\n@include add-breakpoint(Desktop, (1200px));\n\n// Output media queries where the above px are converted to ems.\n// @include breakpoint-set('to ems', true);\n\n\n// Zen grids\n//\n// The default grid system is built using the Zen Grids sass module. Full\n// documentation is available on the [Zen Grids website](http://zengrids.com/).\n//\n// Note: if you are more comfortable using another grid system, you can easily\n// remove Zen Grids and its layouts.\n//\n// Style guide: sass.variables.zen-grids\n\n// These are needed for all breakpoints on all layouts.\n$zen-auto-include-grid-item-base: false;\n$zen-box-sizing: universal-border-box;\n\n// First we set the values we need for the mobile version of our layouts (the\n// version that does _not_ appear inside any @media queries.)\n$zen-columns: 1;\n$zen-gutters: 10px;\n\n// Then we set the values we need for each of the layouts at larger media query\n// sizes. Note how the names of the layouts match the names of our breakpoints\n// above. That allows a single zen-respond-to() to both use the proper item\n// from $zen-layouts and from $breakpoints.\n$zen-layouts: (\n  iPad: (\n    columns: 2,\n    gutters: 25px,\n  ),\n  iPadLandscape: (\n    columns: 3,\n    gutters: 25px,\n  ),\n);\n\n// See $include-rtl below.\n$zen-rtl-selector: '[dir=\"rtl\"]';\n\n\n// Miscellaneous variables\n//\n// `$indent-amount` controls the amount lists, blockquotes and comments are indented.\n//\n// `$include-rtl` controls whether RTL styles are output. Rather than include a separate `*-rtl.css` file, Zen 6 uses Drupal 8's standard `[dir=\"rtl\"]` selector for RTL language support.\n//\n// weight: 10\n//\n// Style guide: sass.variables.misc\n\n$indent-amount: 2 * $base-font-size;\n\n$include-rtl: true;\n// Automatically turn off Zen Grids' RTL support if $include-rtl is false.\n@if not $include-rtl {\n  $zen-rtl-selector: false !global;\n}\n"]}