{"version":3,"sources":["forms/progress-bar/progress-bar.scss","forms/progress-bar/progress-bar.css","../node_modules/chroma-sass/sass/chroma/_internals.scss"],"names":[],"mappings":"AAeA;;EAEE,iBAAiB;ACdnB;;ADgBE;;EACE,kBAAkB;EAClB,cAAc;EACd,yBE2HmD;EF1HnD,yBE0HmD;ADtIvD;;ADeE;;EACE,aAAa;EACb,UAAU;EACV,8EAAwE;ACX5E;;ADcE;;EACE,YAAY;ACVhB;;AAEA;EDWM,WAAW;ACTjB;;ADaE;;EACE,WAAW;EACX,qBAAqB;ACTzB;;AAEA;EDUM,YAAY;ACRlB","file":"progress-bar.css","sourcesContent":["@import 'init';\n\n// Change the default sub-directory for the image-url() mixin.\n$image-url-subdirectory: 'forms/progress-bar';\n\n// Progress bar\n//\n// Shows the progress of a task in a simple bar graph.\n//\n// .progress-bar--inline - An inline progress bar.\n//\n// Markup: progress-bar.twig\n//\n// Style guide: forms.progress-bar\n\n.progress-bar,\n%progress-bar {\n  font-weight: bold;\n\n  &__bar {\n    border-radius: 3px;\n    margin: 0 .2em;\n    border: 1px solid color(progress-bar-border);\n    background-color: color(progress-bar-bg);\n  }\n\n  &__fill {\n    height: 1.5em;\n    width: 5px;\n    background: color(progress-bar) image-url('progress-bar.gif') repeat 0 0;\n  }\n\n  &__percentage {\n    float: right;\n\n    @include rtl() {\n      float: left;\n    }\n  }\n\n  &--inline {\n    width: 16em;\n    display: inline-block;\n\n    @include rtl() {\n      float: right;\n    }\n  }\n}\n\n//\n// Drupal selectors.\n//\n\n.progress {\n  @extend %progress-bar;\n\n  .bar {\n    @extend %progress-bar__bar;\n  }\n\n  .filled {\n    @extend %progress-bar__fill;\n  }\n\n  .percentage {\n    @extend %progress-bar__percentage;\n  }\n}\n\n.ajax-progress-bar {\n  @extend %progress-bar--inline;\n}\n",".progress-bar,\n.progress {\n  font-weight: bold;\n}\n\n.progress-bar__bar,\n.progress .bar {\n  border-radius: 3px;\n  margin: 0 .2em;\n  border: 1px solid #777777;\n  background-color: #dddddd;\n}\n\n.progress-bar__fill,\n.progress .filled {\n  height: 1.5em;\n  width: 5px;\n  background: #1b7ebb url(../..//forms/progress-bar/progress-bar.gif) repeat 0 0;\n}\n\n.progress-bar__percentage,\n.progress .percentage {\n  float: right;\n}\n\n[dir=\"rtl\"] .progress-bar__percentage, [dir=\"rtl\"] .progress .percentage, .progress [dir=\"rtl\"] .percentage {\n  float: left;\n}\n\n.progress-bar--inline,\n.ajax-progress-bar {\n  width: 16em;\n  display: inline-block;\n}\n\n[dir=\"rtl\"] .progress-bar--inline, [dir=\"rtl\"] .ajax-progress-bar {\n  float: right;\n}\n","// Internals\n//\n// Helper functions that query the internal data structure in $chroma. These are\n// not part of the public API and are subject to change at any time.\n//\n// Weight: 10\n//\n// Style guide: internals\n\n// Import the global variables needed by all of Chroma.\n@import './variables';\n\n// chroma-has-scheme($scheme)\n//\n// Checks if the named color scheme exists.\n//\n// Style guide: internals.chroma-has-scheme\n@function chroma-has-scheme($scheme) {\n  @return map-has-key(map-get($chroma, 'schemes'), $scheme);\n}\n\n// chroma-schemes()\n//\n// Returns a list of all color schemes in $chroma.\n//\n// Style guide: internals.chroma-schemes\n@function chroma-schemes() {\n  @return map-keys(map-get($chroma, 'schemes'));\n}\n\n// chroma-has-color($name [, $scheme])\n//\n// Checks if the named color exists in the given scheme or its parent schemes.\n// Returns false or a string of the scheme name that contains the color.\n//\n// Style guide: internals.chroma-has-color\n@function chroma-has-color($name, $scheme: $chroma-active-scheme) {\n  $current-scheme: $scheme;\n  @while $current-scheme {\n    @if map-has-key(map-get($chroma, 'names'), \"#{$current-scheme}::#{$name}\") {\n      @return $current-scheme;\n    }\n    // Look in the parent scheme.\n    $current-scheme: map-get(map-get(map-get($chroma, 'schemes'), $current-scheme), 'parent');\n  }\n  @return false;\n}\n\n// _chroma-add-name()\n//\n// Private function that adds a color to the data structure of the $chroma\n// variable.\n//\n// Style guide: internals._chroma-add-name\n@function _chroma-add-name($scheme, $name, $value: false, $reference: false, $referenced_by: (), $function: false, $parameters: ()) {\n  $names: map-merge(\n    map-get($chroma, 'names'),\n    (\"#{$scheme}::#{$name}\": (\n      value         : $value,\n      reference     : $reference,\n      referenced_by : $referenced_by,\n      function      : $function,\n      parameters    : $parameters,\n    ))\n  );\n\n  @return map-merge(\n    $chroma,\n    ('names': $names)\n  );\n}\n\n// _chroma-init()\n//\n// Private function that sets up the initial data structure of the $chroma\n// variable. Can be called repeatedly without damaging existing data.\n//\n// Style guide: internals._chroma-init\n@function _chroma-init() {\n  @if length($chroma) == 0 {\n    @return (\n      'schemes': (\n        $CHROMA_DEFAULT_SCHEME : (\n          'description': '',\n          'parent': false,\n        ),\n      ),\n      'skins': (),\n      'names': (),\n    );\n  }\n  @else {\n    @return $chroma;\n  }\n}\n\n// is-old-libsass()\n//\n// libsass before 3.3.0 is funky, making it very hard for Chroma to do its job.\n//\n// - `inspect([color])` returns the original value instead of returning the\n//   string equivalent, so you can't cast a color to a string.\n// - `type-of('[color keyword]')` thinks that these strings are colors.\n// - `map-has-key()` works properly, thankfully. So:\n//   - `map-has-key((white: ''), white)` correctly returns `true`\n//   - `map-has-key(('white': ''), 'white')` correctly returns `true`\n//   - `map-has-key((white: ''), 'white')` correctly returns `false`\n//   - `map-has-key(('white': ''), white)` correctly returns `false`\n//   This means we can cobble together a replacement for `type-of()`. And a\n//   partial replacement for `inspect()` that works for everything except\n//   dangerous color keywords.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-old-libsass\n@function _is-old-libsass() {\n  @return if(type-of('white') == 'color', true, false);\n}\n\n// _is-keyword-string($name)\n//\n// Normally, `type-of()` can be used to tell if a given value is a string. But\n// LibSass versions before 3.3.0 think that color keywords in strings are still\n// colors and not strings. This function works, regardless of LibSass bugs.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-keyword-string\n@function _is-keyword-string($name) {\n  @return if(map-has-key($_chroma-css4-color-keywords-in-strings, $name), true, false);\n}\n\n// _safe-call()\n//\n// LibSass incorrectly throws an error when using the variable argument\n// indicator, ..., with an overloaded function; e.g. rgba(). To work-around this\n// bug, we call rgba() with direct parameters.\n//\n// @TODO: Remove when the fix for https://github.com/sass/libsass/issues/2205 is released.\n//\n// Style guide: internals._safe-call\n@function _safe-call($function, $parameters...) {\n  @if $function == rgba {\n    @return rgba(nth($parameters, 1), nth($parameters, 2));\n  }\n  @return call(get-function($function), $parameters...);\n}\n"]}