{"version":3,"sources":["base/_fonts.scss","base/root/_root.scss","base/base.css","../node_modules/typey/stylesheets/typey/mixins/_define-type-sizing.scss","../node_modules/typey/stylesheets/typey/functions/_helpers.scss","../node_modules/typey/stylesheets/typey/mixins/_typeface.scss","init/_variables.scss","../node_modules/typey/stylesheets/typey/_defaults.scss","init/_colors.scss","base/_html5.scss","base/links/_links.scss","../node_modules/chroma-sass/sass/chroma/_internals.scss","base/headings/_headings.scss","../node_modules/typey/stylesheets/typey/mixins/_font-size.scss","../node_modules/typey/stylesheets/typey/mixins/_line-height.scss","../node_modules/typey/stylesheets/typey/mixins/_spacing.scss","base/text/_text.scss","components/divider/_divider.scss","base/grouping/_grouping.scss","base/embedded/_embedded.scss","base/forms/_forms.scss","forms/button/_button.scss","base/tables/_tables.scss"],"names":[],"mappings":"AAiCA,8HAAY;AClBZ;EACE,sBAAsB;ACbxB;;ADgBA;EETI,eAA4C;EAgBxC,kBCgBiB;ECyBrB,wECM6E;ELjD/E,0BAA0B;EAC1B,8BAA8B;EAG9B,gBAAgB;AChBlB;;ACwBM;EFjBN;IEkBQ,eIDuB;ELnB7B;AACF;;ADaA;EAKE,SAAS;EACT,UAAU;EACV,cOhB0C;EPiB1C,yBOf+B;ANCjC;;AOnBA;;;;;;;;;;;;EAYE,cAAc;APsBhB;;AOlBA;;;;EAIE,qBAAqB;APqBvB;;AOjBA;EACE,aAAa;EACb,SAAS;APoBX;;AOhBA;EACE,wBAAwB;APmB1B;;AOfA;;EAEE,aAAa;APkBf;;AQ5CA;EAEE,cFG0C;EED1C,qCAAqC;AR6CvC;;AQvCA;EACE,cCqHqD;AT3EvD;;AQlCA;EACE,cFVyC;AN+C3C;;AQtCA;EAKI,6BAA6B;ARqCjC;;AQ/BA;;EAEE,gBAAgB;ARkClB;;AQ/BA;EAEE;;IAEE,0BAA0B;ERiC5B;EQ7BA;IACE,4BAA4B;IAC5B,mBAAmB;IACnB,eJ3BoB;II4BpB,qBAAqB;ER+BvB;EQ3BA;;IAEE,WAAW;ER6Bb;AACF;;AUxFA;ECUE,eTVwB;EUSxB,iBVTwB;EWgCxB,kBXhCwB;EWgCxB,qBXhCwB;AF+F1B;;AUrFA;ECAE,iBTVwB;EUSxB,oBVTwB;EWgCxB,kBXhCwB;EWgCxB,qBXhCwB;AFsG1B;;AUrFA;ECPE,kBTVwB;EUSxB,oBVTwB;EWgCxB,kBXhCwB;EWgCxB,qBXhCwB;AF6G1B;;AUrFA;ECdE,eTVwB;EUSxB,mBVTwB;EWgCxB,kBXhCwB;EWgCxB,qBXhCwB;AFoH1B;;AUrFA;ECrBE,mBTVwB;EUSxB,mBVTwB;EWgCxB,kBXhCwB;EWgCxB,qBXhCwB;AF2H1B;;AUrFA;EC5BE,mBTVwB;EUSxB,mBVTwB;EWgCxB,kBXhCwB;EWgCxB,qBXhCwB;AFkI1B;;Ac7HA;EAEE,gBAAgB;EAEhB,0BAA0B;EAC1B,yCAAiC;UAAjC,iCAAiC;Ad8HnC;;Ac5HE;EAPF;IAUM,6BAA6B;Ed8HjC;AACF;;Ac1GA;;EAEE,oBAAoB;Ad6GtB;;AczGA;;EAGE,mBAAmB;Ad2GrB;;AchFA;;;;;EXjBI,oGCiBqG;EUSvG,cAAc;AdgFhB;;AczDA;EAEE,kBAAkB;Ad2DpB;;AchBA;EAEE,yBRxIyC;EQyIzC,cR9I0C;ANgK5C;;AcmBA;EHnLE,mBTVwB;AF8K1B;;Ac6BA;;EHjME,mBTVwB;EYgNxB,cAAc;EACd,kBAAkB;EAClB,wBAAwB;Ad5B1B;;Ac+BA;EACE,cAAc;Ad5BhB;;Ac+BA;EACE,UAAU;Ad5BZ;;Ae/LA;;EFiCE,gBXnCW;EaKX,SAAS;EACT,6BNkIqD;ATgEvD;;AetMA;;EFiCE,kBXhCwB;AF0M1B;;AgB7LA;EHmBE,mBXhCwB;AF8M1B;;AgBzJA;;;;EHrBE,gBXnCW;AFwNb;;AgBvJA;;;;EAII,SAAS;AhB0Jb;;AgBlJA;EACE,kBZuGiC;AJ8CnC;;AAEA;EgBpJI,kBAA4B;AhBsJhC;;AgBjJA;;;EAGE,mBZ4FiC;AJwDnC;;AAEA;;;EgBnJI,mBAA6B;AhBuJjC;;AgB9HA;EHlFE,gBXnCW;AFuPb;;AgB/GA;EAGE,uBAAuB;EACvB,SAAS;EAET,iBAAiB;AhB+GnB;;AgBhGA;;EH1HE,gBXnCW;AFkQb;;AiB7PA;EAEE,kBAAkB;AjB+PpB;;AiBvPA;;EAME,eAAe;EACf,YAAY;AjBsPd;;AiB3OA;EAEE,gBAAgB;AjB6OlB;;AkBtQA;;;;;EAME,sBAAsB;EACtB,eAAe;EAEf,aAAa;EAEb,SAAS;AlBsQX;;AkBlQA;EACE,iBAAiB;AlBqQnB;;AkBjQA;;EAEE,oBAAoB;AlBoQtB;;AkBhQA;EACE,iBAAiB;AlBmQnB;;AAEA;;EkB/PE,YAAY;AlBkQd;;AAEA;EkB/PE,6BAA6B;EAE7B,oBAAoB;AlBgQtB;;AAEA;EkB7PI,wBAAwB;AlB+P5B;;AkB1PA;EACE,cAAc;EACd,YAAY;AlB6Pd;;AkB1PA;EAEE,0BAA0B;EAE1B,aAAa;AlB2Pf;;AmBrTA;;;;;EAOE,uBAAuB;EACvB,0BAA0B;AnBsT5B;;AmBnTA;;;;;EAQE,qBAAqB;EACrB,gBAAgB;EAIhB,oBAAoB;EACpB,qBAAqB;EAErB,eAAe;EACf,cb1B0C;ANyU5C;;AmBhUA;;;;;EAqBI,kBAAkB;EAClB,UAAU;AnBmTd;;AmBzUA;;;;;EA2BI,8BAA8B;AnBsTlC;;AmBjVA;;;;;;;;;;;;;EAkCI,qBAAqB;EACrB,cb5CwC;AN2W5C;;AmBlWA;;;;;EAmDE,eAAe;EACf,cV8DqD;ATyPvD;;AmB3WA;;;;;;;;;;;;;EA0DI,cVwDmD;ATyQvD;;AAEA;;EkBtPE,sBAAsB;EAEtB,UAAU;AlBwPZ;;AkB5OA;ELxIE,oCXhCwB;EgB2KxB,yBTtCqD;ESuCrD,aAAa;AlB8Of;;AkB3OA;EAEE,sBAAsB;EACtB,cAAc;EACd,eAAe;EACf,mBAAmB;EAEnB,cAAc;EAGd,iBAAiB;EACjB,cAAc;AlB0OhB;;AkB7NA;EAEE,cAAc;EACd,iBAAiB;AlB+NnB;;AkB5MA;EAEE,iBAAiB;AlB8MnB;;AkBnMA;EAGE,cAAc;AlBoMhB;;AoBnbA;EPkCE,gBXnCW;EkBKX,yBAAyB;EACzB,iBAAiB;EAEjB,WAAW;ApBmbb;;AoBhbA;;EAGE,UAAU;ApBkbZ","file":"base.css","sourcesContent":["// Font faces\n//\n// Instead of relying on the fonts that are available on a user's computer, you\n// can use web fonts which, like images, are resources downloaded to the user's\n// browser. Because of the bandwidth and rendering resources required, web fonts\n// should be used with care.\n//\n// Numerous resources for web fonts can be found on Google. Here are a few\n// websites where you can find Open Source fonts to download:\n// - http://www.fontsquirrel.com/fontface\n// - http://www.theleagueofmoveabletype.com\n//\n// In order to use these fonts, you will need to convert them into formats\n// suitable for web fonts. We recommend the free-to-use Font Squirrel's\n// Font-Face Generator:\n//   http://www.fontsquirrel.com/fontface/generator\n//\n// The following is an example @font-face declaration. This font can then be\n// used in any ruleset using a property like this:  font-family: Example, serif;\n//\n// Since we're using Sass, you'll need to declare your font faces here, then you\n// can add them to the font variables in the _init.scss partial.\n\n// @font-face {\n//   font-family: 'Example';  src: url('../fonts/example.eot');\n//   src: url('../fonts/example.eot?iefix') format('eot'),\n//     url('../fonts/example.woff') format('woff'),\n//     url('../fonts/example.ttf') format('truetype'),\n//     url('../fonts/example.svg#webfontOkOndcij') format('svg');\n//   font-weight: normal;\n//   font-style: normal;\n// }\n\n@import url('fonts.googleapis.com/css?family=Montserrat:300,300i,400,400i,500,500i,600,600i,700,700i|Open+Sans+Condensed:700');\n","// sass-lint:disable no-vendor-prefixes\n\n// Root\n//\n// The HTML root component contains the doctype, HTML element, HEAD element and\n// BODY element. It also contains the CSS for those elements and the `*`\n// universal selector.\n//\n// markup: base-root.twig\n//\n// weight: 2\n//\n// Style guide: base.root\n\n// Use the saner border-box model for all elements.\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  @include define-type-sizing();\n  // Change the default font family in all browsers (opinionated).\n  @include typeface(body);\n  // Prevent adjustments of font size after orientation changes in IE and iOS.\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  // On short pages, we want any background gradients to fill the entire height\n  // of the browser.\n  min-height: 100%;\n}\n\nbody {\n  // Output a horizontal grid to help with debugging typography. The\n  // $typey-debug variable will toggle its output.\n  @include typey-debug-grid();\n  // Remove default margin and padding.\n  margin: 0;\n  padding: 0;\n  color: color(text);\n  background-color: color(text-bg);\n}\n","@import url(\"fonts.googleapis.com/css?family=Montserrat:300,300i,400,400i,500,500i,600,600i,700,700i|Open+Sans+Condensed:700\");\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 100%;\n  line-height: 1.5em;\n  font-family: \"Montserrat\", Arial, Helvetica, \"Nimbus Sans L\", sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  min-height: 100%;\n}\n\n@media print {\n  html {\n    font-size: 12pt;\n  }\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  color: #f0f0f0;\n  background-color: #201c29;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\nprogress {\n  vertical-align: baseline;\n}\n\ntemplate,\n[hidden] {\n  display: none;\n}\n\na {\n  color: #f0f0f0;\n  -webkit-text-decoration-skip: objects;\n}\n\n:visited {\n  color: #bdbdbd;\n}\n\na:active {\n  color: #ffe437;\n}\n\na:active:not(.button) {\n  background-color: transparent;\n}\n\na:active,\na:hover {\n  outline-width: 0;\n}\n\n@media print {\n  :link,\n  :visited {\n    text-decoration: underline;\n  }\n  a[href]::after {\n    content: \" (\" attr(href) \")\";\n    font-weight: normal;\n    font-size: 16px;\n    text-decoration: none;\n  }\n  a[href^='javascript:']::after,\n  a[href^='#']::after {\n    content: '';\n  }\n}\n\nh1 {\n  font-size: 2rem;\n  line-height: 3rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\nh2 {\n  font-size: 1.5rem;\n  line-height: 2.25rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\nh3 {\n  font-size: 1.25rem;\n  line-height: 2.25rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\nh4 {\n  font-size: 1rem;\n  line-height: 1.5rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\nh5 {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\nh6 {\n  font-size: 0.625rem;\n  line-height: 1.5rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\nabbr[title] {\n  border-bottom: 0;\n  text-decoration: underline;\n  text-decoration: underline dotted;\n}\n\n@media print {\n  abbr[title]::after {\n    content: \" (\" attr(title) \")\";\n  }\n}\n\nb,\nstrong {\n  font-weight: inherit;\n}\n\nstrong,\nb {\n  font-weight: bolder;\n}\n\npre,\ncode,\nkbd,\nsamp,\nvar {\n  font-family: Menlo, \"DejaVu Sans Mono\", \"Ubuntu Mono\", Courier, \"Courier New\", monospace, sans-serif;\n  font-size: 1em;\n}\n\ndfn {\n  font-style: italic;\n}\n\nmark {\n  background-color: #ffe437;\n  color: #f0f0f0;\n}\n\nsmall {\n  font-size: 0.875rem;\n}\n\nsub,\nsup {\n  font-size: 0.625rem;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -.25em;\n}\n\nsup {\n  top: -.5em;\n}\n\n.divider,\nhr {\n  margin: 1.5rem 0;\n  border: 0;\n  border-top: 1px solid #dddddd;\n}\n\n.divider > :first-child,\nhr > :first-child {\n  margin-top: 1.5rem;\n}\n\nblockquote {\n  margin: 1.5rem 2rem;\n}\n\ndl,\nmenu,\nol,\nul {\n  margin: 1.5rem 0;\n}\n\nol ol,\nol ul,\nul ol,\nul ul {\n  margin: 0;\n}\n\ndd {\n  margin: 0 0 0 32px;\n}\n\n[dir=\"rtl\"] dd {\n  margin: 0 32px 0 0;\n}\n\nmenu,\nol,\nul {\n  padding: 0 0 0 32px;\n}\n\n[dir=\"rtl\"] menu, [dir=\"rtl\"]\nol, [dir=\"rtl\"]\nul {\n  padding: 0 32px 0 0;\n}\n\nfigure {\n  margin: 1.5rem 0;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\np,\npre {\n  margin: 1.5rem 0;\n}\n\nimg {\n  border-style: none;\n}\n\nimg,\nsvg {\n  max-width: 100%;\n  height: auto;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  box-sizing: border-box;\n  max-width: 100%;\n  font: inherit;\n  margin: 0;\n}\n\nbutton {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\ninput {\n  overflow: visible;\n}\n\n[type='number']::-webkit-inner-spin-button,\n[type='number']::-webkit-outer-spin-button {\n  height: auto;\n}\n\n[type='search'] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type='search']::-webkit-search-cancel-button, [type='search']::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: .54;\n}\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n.button,\nbutton,\nhtml [type='button'],\n[type='reset'],\n[type='submit'] {\n  -moz-appearance: button;\n  -webkit-appearance: button;\n}\n\n.button,\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  display: inline-block;\n  padding: 2px 6px;\n  line-height: inherit;\n  text-decoration: none;\n  cursor: pointer;\n  color: #f0f0f0;\n}\n\n.button::-moz-focus-inner,\nbutton::-moz-focus-inner,\n[type='button']::-moz-focus-inner,\n[type='reset']::-moz-focus-inner,\n[type='submit']::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n.button:-moz-focusring,\nbutton:-moz-focusring,\n[type='button']:-moz-focusring,\n[type='reset']:-moz-focusring,\n[type='submit']:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n.button:hover, .button:focus, .button:active,\nbutton:hover,\nbutton:focus,\nbutton:active,\n[type='button']:hover,\n[type='button']:focus,\n[type='button']:active,\n[type='reset']:hover,\n[type='reset']:focus,\n[type='reset']:active,\n[type='submit']:hover,\n[type='submit']:focus,\n[type='submit']:active {\n  text-decoration: none;\n  color: #f0f0f0;\n}\n\n.button[disabled],\nbutton[disabled],\n[disabled][type='button'],\n[disabled][type='reset'],\n[disabled][type='submit'] {\n  cursor: default;\n  color: #aaaaaa;\n}\n\n.button[disabled]:hover,\nbutton[disabled]:hover,\n[disabled]:hover[type='button'],\n[disabled]:hover[type='reset'],\n[disabled]:hover[type='submit'], .button[disabled]:focus,\nbutton[disabled]:focus,\n[disabled]:focus[type='button'],\n[disabled]:focus[type='reset'],\n[disabled]:focus[type='submit'], .button[disabled]:active,\nbutton[disabled]:active,\n[disabled]:active[type='button'],\n[disabled]:active[type='reset'],\n[disabled]:active[type='submit'] {\n  color: #aaaaaa;\n}\n\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\nfieldset {\n  padding: 0.525rem 0.9375rem 0.975rem;\n  border: 1px solid #dddddd;\n  margin: 0 2px;\n}\n\nlegend {\n  box-sizing: border-box;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n  color: inherit;\n  margin-left: -5px;\n  padding: 0 5px;\n}\n\nlabel {\n  display: block;\n  font-weight: bold;\n}\n\noptgroup {\n  font-weight: bold;\n}\n\ntextarea {\n  overflow: auto;\n}\n\ntable {\n  margin: 1.5rem 0;\n  border-collapse: collapse;\n  border-spacing: 0;\n  width: 100%;\n}\n\ntd,\nth {\n  padding: 0;\n}\n","// Define defaults (use this in the HTML element).\n//\n// @param number $size\n//   (optional) The font-size. Use to set to anything other than $base-font-size.\n// @param number $line-height\n//   (optional) The line-height. Use to set to anything other than $base-line-height.\n//   Set to a ratio when $line-height-as-ratio is true. Will default to $base-line-height-ratio.\n//   Set to false if you do not want to change a ratio of line-height already set.\n@mixin define-type-sizing($size: $base-font-size, $line-height: $base-line-height) {\n  @if $base-unit == rem or $base-unit == em {\n    font-size: $size / $browser-font-size * 100%;\n  }\n  @if $base-unit == px {\n    font-size: $size;\n  }\n\n  @if $line-height != false {\n    @if $line-height-method == \"ratio\" {\n      @if $line-height == $base-line-height {\n        $line-height: $base-line-height-ratio;\n      }\n      line-height: $line-height;\n    }\n    @else {\n      @if $base-unit == rem or $base-unit == em {\n        // In the html element, rem means relative to browser default font size; em means relative to html's font size.\n        line-height: calculate-em-px($line-height, $size);\n      }\n      @if $base-unit == px {\n        line-height: $line-height;\n      }\n    }\n  }\n\n  @if $auto-print-sizing == true {\n    @if $base-unit == rem or $base-unit == em {\n      @media print {\n        font-size: $print-font-size;\n      }\n    }\n    @else {\n      @warn \"As you are not using a relative base unit (rem or em) automatic print media sizing will not work. Set $auto-print-sizing to false to hide this warning\"\n    }\n  }\n}\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","// Embed a typeface.\n//\n// @param string $typeface\n//   A font family from the $typefaces map.\n@mixin typeface($typeface) {\n  $typeface-name: $typeface;\n  $typeface: map-get($typefaces, $typeface);\n\n  $font-family: false;\n  $letter-spacing: false;\n  $weight: false;\n  $style: false;\n  $case: false;\n\n  // Assign values to variables when $typeface is a keyed map.\n  @if type-of($typeface) == \"map\" {\n    @if map-has-key($typeface, font-family) {\n      $font-family: map-get($typeface, font-family);\n    }\n    @if map-has-key($typeface, letter-spacing) {\n      $letter-spacing: map-get($typeface, letter-spacing);\n    }\n    @if map-has-key($typeface, weight) {\n      $weight: map-get($typeface, weight);\n    }\n    @if map-has-key($typeface, style) {\n      $style: map-get($typeface, style);\n    }\n    @if map-has-key($typeface, case) {\n      $case: map-get($typeface, case);\n    }\n  }\n\n  // Assign values to variables when $typeface is shorthand.\n  @if type-of($typeface) == \"list\" {\n    @if (list-separator($typeface) == \"comma\") {\n      // This shorthand is just a list of fonts.\n      $font-family: $typeface;\n    }\n    @else {\n      @each $value in $typeface {\n        // This is a font-family.\n        @if type-of($value) == \"list\" {\n          $font-family: $value;\n        }\n        // This is a letter-spacing value.\n        @if type-of($value) == \"number\" {\n          $letter-spacing: $value;\n        }\n        // This is a font-weight value.\n        @if map-has-key($font-weight, $value) {\n          $weight: $value;\n        }\n        // This is a case value.\n        @else if type-of($value) == \"string\" and index($text-transform-values, $value) != null {\n          $case: $value;\n        }\n        // This is a style value.\n        @else if type-of($value) == \"string\" and index($font-style-values, $value) != null {\n          $style: $value;\n        }\n      }\n    }\n  }\n\n  // Output properties.\n  @if $font-family {\n    font-family: $font-family;\n  }\n  @else {\n    @error \"Typeface '#{$typeface-name}' does not have a font-family\";\n  }\n  @if $letter-spacing {\n    @if ($letter-spacing == 0) {\n      letter-spacing: 0;\n    }\n    @else {\n      letter-spacing: calculate-em-px($letter-spacing, $base-font-size);\n    }\n  }\n  @if $weight {\n    font-weight: weight($weight);\n  }\n  @if $style {\n    font-style: $style;\n  }\n  @if $case {\n    text-transform: $case;\n  }\n}\n","// Variables\n//\n// Set variables for this site before a library sets its !default value.\n//\n// Style guide: sass.variables\n\n\n// Browser support\n//\n// For older versions of browsers, some Sass relies on the `support-for()` to\n// control whether extra CSS is needed to be output. The `support-for()`\n// function and the `$support-for` variable are documented on the [support-for\n// homepage](https://github.com/JohnAlbin/support-for).\n//\n// Style guide: sass.variables.support-for\n\n// Support the same browsers as normalize.css v3.\n// Possible keys: chrome, edge, firefox, ie, opera, safari, '*'\n$support-for: (\n  // IE 9-11\n  ie:  9,\n  // The last 4 versions of all other browsers.\n  '*': -4,\n);\n\n\n// Font faces, stacks and sizes.\n//\n// Font styling and line heights are controlled by the several variables that\n// used by mixins like `type-layout()`, `margin-top()`, and `margin-bottom()`.\n// These variable and mixins are documented on the [Typey\n// homepage](https://github.com/jptaranto/typey).\n//\n// Style guide: sass.variables.typey\n\n// The font size set on the root html element.\n$base-font-size:    16px;\n\n// The base line height determines the basic unit of vertical rhythm.\n$base-line-height:  24px;\n\n// The font sizes in our type hierarchy as tee shirt sizes.\n$font-size: (\n  xxl:              32px,\n  xl:               24px,\n  l:                20px,\n  m:                $base-font-size,\n  s:                14px,\n  xs:               10px\n);\n\n// Typey allows you to alter font weights site-wide with this map.\n$font-weight: (\n  bold:             700,\n  semiBold:         600,\n  medium:           500,\n  normal:           400,\n  light:            300\n);\n\n// The following font family declarations use widely available fonts.\n// A user's web browser will look at the comma-separated list and will\n// attempt to use each font in turn until it finds one that is available\n// on the user's computer. The final \"generic\" font (sans-serif, serif or\n// monospace) hints at what type of font to use if the web browser doesn't\n// find any of the fonts in the list.\n\n// Serif font stacks.\n$times-new-roman: 'Times New Roman', Times, Georgia, 'DejaVu Serif', serif;\n$times:           Times, 'Times New Roman', Georgia, 'DejaVu Serif', serif;\n$georgia:         Georgia, 'Times New Roman', 'DejaVu Serif', serif;\n\n// Sans-serif font stacks.\n$montserrat:          'Montserrat', Arial, Helvetica, 'Nimbus Sans L', sans-serif;\n$open-sans-sondensed: 'Open Sans Condensed', Arial, Helvetica, sans-serif;\n$verdana:             Verdana, Tahoma, 'DejaVu Sans', sans-serif;\n$tahoma:              Tahoma, Verdana, 'DejaVu Sans', sans-serif;\n$helvetica:           Helvetica, Arial, 'Nimbus Sans L', sans-serif;\n$arial:               Arial, Helvetica, 'Nimbus Sans L', sans-serif;\n$impact:              Impact, 'Arial Narrow', Helvetica, sans-serif;\n\n// Monospace font stacks.\n// For an explanation of why \"sans-serif\" is at the end of this list, see\n// http://meyerweb.com/eric/thoughts/2010/02/12/fixed-monospace-sizing/\n$menlo:           Menlo, 'DejaVu Sans Mono', 'Ubuntu Mono', Courier, 'Courier New', monospace, sans-serif;\n\n// The font faces you specify in the $typefaces map can be used in the\n// typeface() mixin.\n$typefaces: (\n  body: (\n    font-family: $montserrat,\n  ),\n  monospace: (\n    font-family: $menlo,\n  ),\n  compact: (\n    font-family: $open-sans-sondensed,\n    weight: bold,\n    case: uppercase,\n    letter-spacing: .5px,\n  ),\n);\n\n// Output a horizontal grid to help with debugging typography.\n$typey-debug: false;\n\n// The length unit in which to output font size and margin values.\n// Supported values: px, em, rem.\n$base-unit:         'rem';\n\n// px fallbacks for rem units are needed for IE 8 and earlier.\n$rem-fallback:      false;\n\n\n// Breakpoints\n//\n// Use the `respond-to()` mixin to use named breakpoints. Documentation is\n// available in the [Breakpoint wiki\n// pages](https://github.com/at-import/breakpoint/wiki/Respond-To).\n//\n// Style guide: sass.variables.breakpoints\n\n// Small phones (e.g. iPhone 5 - Portrait)\n@include add-breakpoint(iPhone5, (320px, 'no-query' true));\n// Small phones (e.g. iPhone 5 - Landscape)\n@include add-breakpoint(iPhone5Landscape, (480px, 'no-query' true));\n// Small phones (e.g. iPhone 5s - Landscape)\n@include add-breakpoint(iPhone5sLandscape, (568px, 'no-query' true));\n// Small phones (e.g. iPhone 6|7|8 - Landscape)\n@include add-breakpoint(iPhone8Landscape, (667px, 'no-query' true));\n// Small phones (e.g. iPhone 6|7|8Plus - Landscape)\n@include add-breakpoint(iPhone8PlusLandscape, (736px, 'no-query' true));\n@include add-breakpoint(iPhoneX, (834px, 'no-query' true));\n@include add-breakpoint(iPad, (834px, 'no-query' true));\n@include add-breakpoint(iPadLandscape, (1112px, 'no-query' true));\n@include add-breakpoint(iPadPro,  (1024px));\n@include add-breakpoint(Desktop, (1200px));\n\n// Output media queries where the above px are converted to ems.\n// @include breakpoint-set('to ems', true);\n\n\n// Zen grids\n//\n// The default grid system is built using the Zen Grids sass module. Full\n// documentation is available on the [Zen Grids website](http://zengrids.com/).\n//\n// Note: if you are more comfortable using another grid system, you can easily\n// remove Zen Grids and its layouts.\n//\n// Style guide: sass.variables.zen-grids\n\n// These are needed for all breakpoints on all layouts.\n$zen-auto-include-grid-item-base: false;\n$zen-box-sizing: universal-border-box;\n\n// First we set the values we need for the mobile version of our layouts (the\n// version that does _not_ appear inside any @media queries.)\n$zen-columns: 1;\n$zen-gutters: 10px;\n\n// Then we set the values we need for each of the layouts at larger media query\n// sizes. Note how the names of the layouts match the names of our breakpoints\n// above. That allows a single zen-respond-to() to both use the proper item\n// from $zen-layouts and from $breakpoints.\n$zen-layouts: (\n  iPad: (\n    columns: 2,\n    gutters: 25px,\n  ),\n  iPadLandscape: (\n    columns: 3,\n    gutters: 25px,\n  ),\n);\n\n// See $include-rtl below.\n$zen-rtl-selector: '[dir=\"rtl\"]';\n\n\n// Miscellaneous variables\n//\n// `$indent-amount` controls the amount lists, blockquotes and comments are indented.\n//\n// `$include-rtl` controls whether RTL styles are output. Rather than include a separate `*-rtl.css` file, Zen 6 uses Drupal 8's standard `[dir=\"rtl\"]` selector for RTL language support.\n//\n// weight: 10\n//\n// Style guide: sass.variables.misc\n\n$indent-amount: 2 * $base-font-size;\n\n$include-rtl: true;\n// Automatically turn off Zen Grids' RTL support if $include-rtl is false.\n@if not $include-rtl {\n  $zen-rtl-selector: false !global;\n}\n","// The browser font size default. No need to change this.\n// Allowed units: px\n$browser-font-size:        16px !default;\n\n// Allowed units: rem, em or px\n$base-unit:                rem !default;\n\n// The base font size will be used for most calculations involving font-size.\n// Allowed units: px\n$base-font-size:           16px !default;\n\n// The base line height will be used for most calculations involving height.\n// Allowed units: px\n$base-line-height:         24px !default;\n\n// The method to calculate line-height. Allowed values: rhythm or ratio.\n// Rhytm uses a vertical rhythm approach where line-height is specified as\n// a multiple of the $base-line-height.\n// Ratio uses a ratio approach where line-height is specified as a ratio\n// of the elements font-size.\n$line-height-method:       rhythm !default;\n\n// The default ratio of line-height to font-size.\n$base-line-height-ratio:   1.5 !default;\n\n// By default we will provide fallbacks when rem is the base unit.\n$rem-fallback:             true !default;\n\n// By default, when rem or em are the base unit we will output a print suitable\n// media query with the define-type-sizing() mixin. This will take care of all\n// print media type sizing effortlessly.\n$auto-print-sizing:        true !default;\n\n// The pt font-size to be used with the print media query when\n// $auto-print-sizing is enabled.\n// Allowed units: pt\n$print-font-size:          12pt !default;\n\n// Default font sizes\n// Once you redefine the $font-size map it will overwrite all sizes here.\n// Allowed units: px\n$font-size: (\n  xxxl:                    60px,\n  xxl:                     46px,\n  xl:                      32px,\n  l:                       24px,\n  m:                       16px,\n  s:                       14px,\n  xs:                      12px\n) !default;\n\n// Default font weights\n// This map and accompanying function help provide granular control over\n// setting and retrieving static font weights.\n$font-weight: (\n  bold:                    700,\n  normal:                  400,\n  lighter:                 200\n) !default;\n\n// Declare typefaces\n// These can use any key you like, and allow you to set global letter-spacing,\n// weight and case for font-families. You can then use the\n// font-family mixin to embed your font families anywhere you like.\n//\n// Each key in the $typefaces map can either be a keyed map of settings\n// using any combination of the keys below, or it can be a shorthand list\n// of each property value. When using shorthand it doesn't matter what order\n// each value is arranged in, but best practice is to do it in the order:\n// [font-family] [letter-spacing] [weight] [case]\n//\n// @setting list font-family\n//   Any standard CSS font-family. Use typey pre-written stacks or roll your own.\n// @setting number letter-spacing\n//   CSS letter-spacing. Specified as a px value when font-size is the\n//   $base-font-size.\n// @setting string weight\n//   A key from the $font-weight map. Only specify this if you want a consistant\n//   font-weight used accross the board with this typeface.\n// @setting string case\n//   A value for CSS text-transform. Only specify this if you want a consistant\n//   case used accross the board with this typeface.\n$typefaces: () !default;\n\n// Declare typestyles\n// These can use any key you like, and allow you to set an easily reusable type\n// style. They can be as simple as a font-size and line-height, or can go on\n// to encompass a full range of css type properties.\n//\n// Each key in the $typestyles map can either be a keyed map of settings\n// using any combination of the keys below, or it can be a shorthand list\n// of each property value. When using shorthand for $typestyles, the first value\n// must always be font-size. After that it doesn't matter what order each value\n// is arranged in, but best practice is to do it in the order:\n// [font-size] [line-height] [weight] [case]\n//\n// @setting number|string font-size\n//   A size from the $font-size map or px value to be converted\n// @setting number $x line-height\n//   Multiple of line height, ratio or px value to be converted.\n// @setting string weight\n//   A key from the $font-weight map.\n// @setting string case\n//   A value for CSS text-transform.\n$typestyles: () !default;\n\n// Debug grid\n// Shows horizontal lines for each elements line height.\n$typey-debug:              false !default;\n\n// Debug grid coloring\n$typey-debug-color:        #4affff !default;\n\n// Lets store the allowed values for text-transform and font-style so we can\n// make shorthand work a little better.\n$text-transform-values: (\n  lowercase,\n  uppercase,\n  capitalize\n) !default;\n\n$font-style-values: (\n  normal,\n  italic,\n  oblique\n) !default;\n\n// Warnings for $base-unit.\n@if $base-unit != px and $base-unit != rem and $base-unit != em {\n  @error \"$base-unit must be one of the following unit types: rem, em or px\";\n}\n\n// Warnings for $base-font-size and $base-line-height.\n@if unit($base-font-size) != px {\n  @error \"$base-font-size must be in px\";\n}\n@if unit($base-line-height) != px {\n  @error \"$base-line-height must be in px\";\n}\n\n// Warnings for $print-font-size.\n@if unit($print-font-size) != pt {\n  @error \"$print-font-size must be in pt\";\n}\n\n// Warnings for $font-size.\n@each $key, $size in $font-size {\n  @if unit($size) != px {\n    @error \"Size '#{$key}' in $font-size map is not specified in px\";\n  }\n}\n\n// Warnings for $font-weight.\n$typey-text-transform-properties: none capitalize uppercase lowercase initial inherit;\n@each $property in $typey-text-transform-properties {\n  @if map-has-key($font-weight, $property) {\n    @warn \"'#{$property}' used in $font-weight map is a potential value of the text-transform property and will conflict when using typey shorthand\";\n  }\n}\n\n// Warnings for $typefaces.\n@each $key, $typeface in $typefaces {\n  @if type-of($typeface) != \"map\" and type-of($typeface) != \"list\" {\n    @error \"Typeface '#{$key}' in $typefaces map must be a keyed map or a shorthand list in the format: [font-family] [letter-spacing] [weight] [case]\";\n  }\n}\n\n// Warnings for $typestyles.\n@each $key, $typestyle in $typestyles {\n  @if type-of($typestyle) == \"list\" {\n    @each $value in $typestyle {\n      @if index($typestyle, $value) == 1 {\n        $allowed-types: \"font-size\", \"px\";\n        $type: typey-check-value($value);\n        @if index($allowed-types, $type) == null {\n          @error \"Incorrect shorthand format used in '#{$key}' in $typestyles map: [font-size] must appear first\";\n        }\n      }\n    }\n  }\n}\n","// sass-lint:disable indentation, no-color-keywords\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. To learn more,\n// [read the Chroma documentation](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma.twig\n//\n// Weight: -1\n//\n// Style guide: sass.colors\n\n// Define the default color scheme's color names.\n$chroma: define-default-color-scheme('branding', 'The site\\'s main colors. Can be used to define colors in other color schemes.');\n\n$chroma: add-colors((\n  black:                  #111,\n  grey-dark:              ('black' lighten 40%),\n  'grey':                 ('black' lighten 60%),\n  grey-light:             ('black' lighten 80%),\n  grey-extra-light:       ('black' lighten 93.33%),\n  white:                  rgb(240, 240, 240),\n\n  dark-purple:            #201c29,\n  blue:                   #1b7ebb,\n  red:                    rgb(228, 24, 24),\n  yellow:                 rgb(255, 228, 55),\n));\n\n// Define color names for functional uses.\n$chroma: define-color-scheme('functional', 'Colors used by functional parts of the design.');\n$chroma: add-colors('functional', (\n  // Colors used in the main content area.\n  text:                   'white',\n  text-bg:                'dark-purple',\n\n  link:                   'white',\n  link-visited:           ('white' darken 20%),\n  link-active:            'yellow',\n\n  border:                 'grey-light',\n\n  autocomplete:           'black',\n  autocomplete-bg:        'white',\n  autocomplete-select:    'white',\n  autocomplete-select-bg: 'blue',\n\n  body-bg:                'text-bg',\n\n  button:                 'text',\n  button-disabled:        'grey',\n\n  fieldset-summary:       'grey',\n  form-error:             'red',\n\n  mark-highlight:         'red',\n  mark-bg:                'yellow',\n\n  menu-active:            'text',\n\n  preview-bg:             ('yellow' lighten 43%),\n\n  progress-bar:           'blue',\n  progress-bar-bg:        'grey-light',\n  progress-bar-border:    'grey-dark',\n\n  resizable-grippie:      'grey-extra-light',\n\n  row-stripe:             'grey-extra-light',\n  row-disabled:           'grey-light',\n\n  skip-link:              'white',\n  skip-link-bg:           'grey-dark',\n\n  status:                 'blue',\n  status-bg:              (status lighten 62%),\n  status-highlight:       text,\n  warning:                text,\n  warning-bg:             ('yellow' lighten 45%),\n  warning-border:         'yellow',\n  error:                  'red',\n  error-bg:               (error lighten 57%),\n\n  tabs-border:            'border',\n  tabs-bg:                'text-bg',\n  tab:                    'text',\n  tab-text-shadow:        'white',\n  tab-bg:                 ('grey-light' lighten 6.66%),\n  tab-secondary:          'grey-dark',\n\n  table-drag:             ('yellow' lighten 43%),\n  table-select:           ('yellow' lighten 47%),\n\n  watermark:              'grey-extra-light',\n));\n\n$chroma-active-scheme: 'functional';\n","// HTML5 display definitions\n// ==========================================================================\n\n// Add the correct display in IE <10.\n// Add the correct display in Edge, IE, and Firefox for `details` or `summary`.\n// Add the correct display in IE for `main`.\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\n// Add the correct display in IE <10.\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n}\n\n// Add the correct display and remove excess height in iOS 4-7.\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n// Add the correct vertical alignment in Chrome, Firefox, and Opera.\nprogress {\n  vertical-align: baseline;\n}\n\n// Add the correct display in IE <11, Safari <8, and Firefox <22.\ntemplate,\n[hidden] {\n  display: none;\n}\n","// Links\n//\n// Hyperlinks are used to allow the user to navigate to other resources or to\n// download a resource.\n//\n// The order of link states are based on Eric Meyer's article:\n// http://meyerweb.com/eric/thoughts/2007/06/11/who-ordered-the-link-states\n//\n// :visited - A link that has already been visited.\n// :hover   - A link that is being hovered over.\n// :focus   - A link that has been given keyboard focus.\n// :active  - A link that is being actively clicked.\n//\n// Markup: links-a.twig\n//\n// Style guide: base.link\n\na,\n%link {\n  color: color(link);\n  // Remove gaps in links underline in iOS 8+ and Safari 8+.\n  -webkit-text-decoration-skip: objects;\n}\n\n// Any element can receive focus, but only links can be visited, so we can\n// safely lower this selector's specificity. This also ensures visited links\n// with additional styles won't have their styles overridden.\n:visited {\n  color: color(link-visited);\n}\n\n// a:hover,\n// a:focus {\n//   // Add your styles.\n// }\n\na:active {\n  color: color(link-active);\n\n  &:not(.button) {\n    // Remove the gray background on active links in IE 10.\n    background-color: transparent;\n  }\n}\n\n// Remove the outline on focused links when they are also active or hovered\n// in all browsers (opinionated).\na:active,\na:hover {\n  outline-width: 0;\n}\n\n@media print {\n  // Underline all links.\n  :link,\n  :visited {\n    text-decoration: underline;\n  }\n\n  // Add visible URL after links.\n  a[href]::after {\n    content: ' (' attr(href) ')';\n    font-weight: normal;\n    font-size: $base-font-size;\n    text-decoration: none;\n  }\n\n  // Only display useful links.\n  a[href^='javascript:']::after,\n  a[href^='#']::after {\n    content: '';\n  }\n}\n","// Internals\n//\n// Helper functions that query the internal data structure in $chroma. These are\n// not part of the public API and are subject to change at any time.\n//\n// Weight: 10\n//\n// Style guide: internals\n\n// Import the global variables needed by all of Chroma.\n@import './variables';\n\n// chroma-has-scheme($scheme)\n//\n// Checks if the named color scheme exists.\n//\n// Style guide: internals.chroma-has-scheme\n@function chroma-has-scheme($scheme) {\n  @return map-has-key(map-get($chroma, 'schemes'), $scheme);\n}\n\n// chroma-schemes()\n//\n// Returns a list of all color schemes in $chroma.\n//\n// Style guide: internals.chroma-schemes\n@function chroma-schemes() {\n  @return map-keys(map-get($chroma, 'schemes'));\n}\n\n// chroma-has-color($name [, $scheme])\n//\n// Checks if the named color exists in the given scheme or its parent schemes.\n// Returns false or a string of the scheme name that contains the color.\n//\n// Style guide: internals.chroma-has-color\n@function chroma-has-color($name, $scheme: $chroma-active-scheme) {\n  $current-scheme: $scheme;\n  @while $current-scheme {\n    @if map-has-key(map-get($chroma, 'names'), \"#{$current-scheme}::#{$name}\") {\n      @return $current-scheme;\n    }\n    // Look in the parent scheme.\n    $current-scheme: map-get(map-get(map-get($chroma, 'schemes'), $current-scheme), 'parent');\n  }\n  @return false;\n}\n\n// _chroma-add-name()\n//\n// Private function that adds a color to the data structure of the $chroma\n// variable.\n//\n// Style guide: internals._chroma-add-name\n@function _chroma-add-name($scheme, $name, $value: false, $reference: false, $referenced_by: (), $function: false, $parameters: ()) {\n  $names: map-merge(\n    map-get($chroma, 'names'),\n    (\"#{$scheme}::#{$name}\": (\n      value         : $value,\n      reference     : $reference,\n      referenced_by : $referenced_by,\n      function      : $function,\n      parameters    : $parameters,\n    ))\n  );\n\n  @return map-merge(\n    $chroma,\n    ('names': $names)\n  );\n}\n\n// _chroma-init()\n//\n// Private function that sets up the initial data structure of the $chroma\n// variable. Can be called repeatedly without damaging existing data.\n//\n// Style guide: internals._chroma-init\n@function _chroma-init() {\n  @if length($chroma) == 0 {\n    @return (\n      'schemes': (\n        $CHROMA_DEFAULT_SCHEME : (\n          'description': '',\n          'parent': false,\n        ),\n      ),\n      'skins': (),\n      'names': (),\n    );\n  }\n  @else {\n    @return $chroma;\n  }\n}\n\n// is-old-libsass()\n//\n// libsass before 3.3.0 is funky, making it very hard for Chroma to do its job.\n//\n// - `inspect([color])` returns the original value instead of returning the\n//   string equivalent, so you can't cast a color to a string.\n// - `type-of('[color keyword]')` thinks that these strings are colors.\n// - `map-has-key()` works properly, thankfully. So:\n//   - `map-has-key((white: ''), white)` correctly returns `true`\n//   - `map-has-key(('white': ''), 'white')` correctly returns `true`\n//   - `map-has-key((white: ''), 'white')` correctly returns `false`\n//   - `map-has-key(('white': ''), white)` correctly returns `false`\n//   This means we can cobble together a replacement for `type-of()`. And a\n//   partial replacement for `inspect()` that works for everything except\n//   dangerous color keywords.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-old-libsass\n@function _is-old-libsass() {\n  @return if(type-of('white') == 'color', true, false);\n}\n\n// _is-keyword-string($name)\n//\n// Normally, `type-of()` can be used to tell if a given value is a string. But\n// LibSass versions before 3.3.0 think that color keywords in strings are still\n// colors and not strings. This function works, regardless of LibSass bugs.\n//\n// @TODO: Remove when LibSass 3.2.5 support is dropped.\n//\n// Style guide: internals._is-keyword-string\n@function _is-keyword-string($name) {\n  @return if(map-has-key($_chroma-css4-color-keywords-in-strings, $name), true, false);\n}\n\n// _safe-call()\n//\n// LibSass incorrectly throws an error when using the variable argument\n// indicator, ..., with an overloaded function; e.g. rgba(). To work-around this\n// bug, we call rgba() with direct parameters.\n//\n// @TODO: Remove when the fix for https://github.com/sass/libsass/issues/2205 is released.\n//\n// Style guide: internals._safe-call\n@function _safe-call($function, $parameters...) {\n  @if $function == rgba {\n    @return rgba(nth($parameters, 1), nth($parameters, 2));\n  }\n  @return call(get-function($function), $parameters...);\n}\n","// Headings\n//\n// All HTML headings, `<h1>` through `<h6>`, are available. `%h1` through `%h6`\n// classes are also available, for when you want to match the font styling of a\n// heading but still want your text to be displayed inline.\n//\n// Markup: headings-h.twig\n//\n// Style guide: base.headings\n\n// Address variable `h1` font-size and margin within `section` and `article`\n// contexts in Firefox 4+, Safari, and Chrome.\nh1,\n%h1 {\n  // Set the font-size and line-height while keeping a proper vertical rhythm.\n  @include type-layout(xxl, 2);\n\n  // Set 1 unit of vertical rhythm on the top and bottom margins.\n  @include margin-top(1, xxl);\n  @include margin-bottom(1, xxl);\n}\n\nh2,\n%h2 {\n  @include type-layout(xl, 1.5);\n  @include margin-top(1, xl);\n  @include margin-bottom(1, xl);\n}\n\nh3,\n%h3 {\n  @include type-layout(l, 1.5);\n  @include margin-top(1, l);\n  @include margin-bottom(1, l);\n}\n\nh4,\n%h4 {\n  @include type-layout(m, 1);\n  @include margin-top(1, m);\n  @include margin-bottom(1, m);\n}\n\nh5,\n%h5 {\n  @include type-layout(s, 1);\n  @include margin-top(1, s);\n  @include margin-bottom(1, s);\n}\n\nh6,\n%h6 {\n  @include type-layout(xs, 1);\n  @include margin-top(1, xs);\n  @include margin-bottom(1, xs);\n}\n","// Define font-size (with fallback)\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      @if $type == \"font-size\" {\n        $map-size: map-get($font-size, $size);\n        font-size: $map-size;\n      }\n      @if $type == \"px\" {\n        font-size: $size;\n      }\n    }\n  }\n  font-size: font-size($size, $context);\n}\n","// Define line-height (with fallback).\n//\n// @param number $x\n//   Multiple of line height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin line-height($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\";\n  $type: typey-validator($x, $allowed-types);\n  @if $base-unit == rem and $line-height-method == \"rhythm\" {\n    @if $rem-fallback == true {\n      @if $type == \"multiplier\" {\n        line-height: $x * $base-line-height;\n      }\n      @if $type == \"px\" {\n        line-height: $x;\n      }\n    }\n  }\n  line-height: line-height($x, $context);\n}\n","// Define spacing (with fallbacks).\n//\n// @param string $type\n//   The type of spacing: margin, padding, margin-top, etc.\n// @param number|list|string $spacing\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin spacing($property, $spacing, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\", \"list\";\n  $type: typey-validator($spacing, $allowed-types);\n\n  $px-fallback-list: ();\n  $converted-list: ();\n\n  @each $x in $spacing {\n    @if $base-unit == rem {\n      $allowed-types: \"multiplier\", \"px\", \"auto\";\n      $type: typey-validator($x, $allowed-types);\n      @if $type == \"multiplier\" {\n        $spacing: $x * $base-line-height;\n        $px-fallback-list: join($px-fallback-list, $spacing, $separator: space);\n      }\n      @if $type == \"px\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n      @if $type == \"auto\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n    }\n    $spacing: spacing($x, $context);\n    $converted-list: join($converted-list, $spacing, $separator: space);\n  }\n\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      #{$property}: $px-fallback-list;\n    }\n  }\n  #{$property}: $converted-list;\n}\n\n// Wrapper mixins for various spacing properties.\n// These can be used to provide easily sized spacing in the base unit.\n//\n// @param number|list|string $x\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin margin($x, $context: $base-font-size) {\n  @include spacing(margin, $x, $context);\n}\n@mixin margin-top($x, $context: $base-font-size) {\n  @include spacing(margin-top, $x, $context);\n}\n@mixin margin-bottom($x, $context: $base-font-size) {\n  @include spacing(margin-bottom, $x, $context);\n}\n@mixin margin-left($x, $context: $base-font-size) {\n  @include spacing(margin-left, $x, $context);\n}\n@mixin margin-right($x, $context: $base-font-size) {\n  @include spacing(margin-right, $x, $context);\n}\n@mixin padding($x, $context: $base-font-size) {\n  @include spacing(padding, $x, $context);\n}\n@mixin padding-top($x, $context: $base-font-size) {\n  @include spacing(padding-top, $x, $context);\n}\n@mixin padding-bottom($x, $context: $base-font-size) {\n  @include spacing(padding-bottom, $x, $context);\n}\n@mixin padding-left($x, $context: $base-font-size) {\n  @include spacing(padding-left, $x, $context);\n}\n@mixin padding-right($x, $context: $base-font-size) {\n  @include spacing(padding-right, $x, $context);\n}\n","// Text-level semantics\n//\n// The elements in this section give semantics to inline text.\n//\n// Weight: 1\n//\n// Style guide: base.text\n\n// Abbreviation / Acroynym\n//\n// The `<abbr>` element makes the meanings of abbreviations and acronyms visible\n// on hover.\n//\n// Markup: text-abbr.twig\n//\n// Style guide: base.text.abbr\n\nabbr[title] {\n  // Remove the bottom border in Firefox <40.\n  border-bottom: 0;\n  // Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n  text-decoration: underline;\n  text-decoration: underline dotted;\n\n  @media print {\n    // Add visible title after abbreviations.\n    &::after {\n      content: ' (' attr(title) ')';\n    }\n  }\n}\n\n// Bold\n//\n// The `<strong>` element or the `<b>` element is for emphasizing a snippet of\n// text with a heavier font-weight.\n//\n// Feel free to use `<b>` in HTML5. `<b>` is meant to highlight words or phrases\n// without conveying additional importance.\n//\n// Markup: text-b.twig\n//\n// Weight: -1\n//\n// Style guide: base.text.b\n\n// Prevent the duplicate application of `bolder` by the next rule in Safari 6.\n\nb,\nstrong {\n  font-weight: inherit;\n}\n\n// sass-lint:disable no-mergeable-selectors\nstrong,\nb {\n  // Add the correct font weight in Chrome, Edge, and Safari.\n  font-weight: bolder;\n}\n// sass-lint:enable no-mergeable-selectors\n\n// Cite\n//\n// The `<cite>` element represents a reference to a creative work.\n//\n// Markup: text-cite.twig\n//\n// Style guide: base.text.cite\n\n// cite {\n//   // Add your styles.\n// }\n\n// Code\n//\n// The `<code>` element represents a fragment of computer code. The `<var>`\n// element represents a variable. The `<samp>` element represents (sample)\n// output from a program or computing system. The `<kbd>` element represents\n// user input (typically keyboard input.)\n//\n// Markup: text-code.twig\n//\n// Style guide: base.text.code\n\n%monospace,\ncode,\nkbd,\nsamp,\nvar {\n  // Correct the inheritance and scaling of font size in all browsers.\n  // The font-family value ends with \", serif\".\n  @include typeface(monospace);\n  // Correct the odd `em` font sizing in all browsers.\n  font-size: 1em;\n}\n\n// Deleted text\n//\n// The `<del>` element indicates blocks of text that have been deleted.\n//\n// Markup: text-del.twig\n//\n// Style guide: base.text.del\n\n// del {\n//   // Add your styles.\n// }\n\n// Definition\n//\n// The `<dfn>` element represents the defining instance of a term.\n//\n// Markup: text-dfn.twig\n//\n// Style guide: base.text.dfn\n\ndfn {\n  // Add the correct font style in Android <4.4.\n  font-style: italic;\n}\n\n// Italics\n//\n// The `<em>` element or the `<i>` element is used for emphasizing a snippet of\n// text with italics.\n//\n// Feel free to use `<i>` element in HTML5. `<i>` is meant to convey voice,\n// technical terms, etc.\n//\n// Markup: text-i.twig\n//\n// Weight: -1\n//\n// Style guide: base.text.i\n\n// i,\n// em {\n//   // Add your styles.\n// }\n\n// Inserted text\n//\n// The `<ins>` element indicates additions to the document.\n//\n// Markup: text-ins.twig\n//\n// Style guide: base.text.ins\n\n// ins {\n//   // Add your styles.\n// }\n\n// Marked text\n//\n// The `<mark>` element highlights a run of text due to its relevance in another\n// context.\n//\n// Markup: text-mark.twig\n//\n// Style guide: base.text.mark\n\nmark {\n  // Add the correct background and color in IE <10.\n  background-color: color(mark-bg);\n  color: color(text);\n}\n\n// Quote\n//\n// The `<q>` element represents an inline quote from another source. Longer\n// quotes should use the `<blockquote>` element.\n//\n// Markup: text-q.twig\n//\n// Style guide: base.text.q\n\n// q {\n//   // Add your styles.\n// }\n\n// Strikethrough text\n//\n// The `<s>` element indicates blocks of text that are no longer relevant.\n//\n// Markup: text-s.twig\n//\n// Style guide: base.text.s\n\n// s {\n//   // Add your styles.\n// }\n\n// Small text\n//\n// For de-emphasizing inline or blocks of text, use the `<small>` element to set\n// text at 80% the size of the parent.\n//\n// Markup: text-small.twig\n//\n// Style guide: base.text.small\n\nsmall {\n  // Add the correct font size in all browsers.\n  @include font-size(s);\n}\n\n// Superscript / Subscript\n//\n// The `<sup>` element represents a superscript and the `<sub>` element\n// represents a subscript.\n//\n// Markup: text-sub.twig\n//\n// Style guide: base.text.sub\n\nsub,\nsup {\n  // Prevent `sub` and `sup` elements from affecting the line height in\n  // all browsers.\n  @include font-size(xs);\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -.25em;\n}\n\nsup {\n  top: -.5em;\n}\n\n// Underlined text\n//\n// To underline text use the `<u>` element. Not recommended since underlines are\n// used by web browsers to style hyperlinks.\n//\n// Markup: text-u.twig\n//\n// Style guide: base.text.u\n\n// u {\n//   // Add your styles.\n// }\n","// Unlike most other components, the CSS for this component is included with the\n// base.css styles as it is needed for the `hr` element.\n\n// Divider\n//\n// Can be used as an `<hr>`, an empty `<div>` or as a container.\n//\n// Markup: divider.twig\n//\n// Style guide: components.divider\n\n.divider,\n%divider {\n  @include margin(1 0);\n  border: 0;\n  border-top: 1px solid color(border);\n\n  // If used as a container, add a top margin to the first child.\n  > :first-child {\n    @include margin-top(1);\n  }\n}\n","// Dependencies.\n@import 'base/text/text';\n@import 'components/divider/divider';\n\n// Grouping content\n//\n// Weight: 1\n//\n// Style guide: base.grouping\n\n\n// Block quotes\n//\n// The `<blockquote>` element is for quoting blocks of content from another\n// source within your document. Wrap the `<blockquote>` around any <abbr\n// title=\"HyperText Markup Language\">HTML</abbr> as the quote. For straight\n// quotes, we recommend a `<p>`.\n//\n// Optionally, add a `<footer>` to identify the source of the quote, wrapping\n// the name of the source work in `<cite>`.\n//\n// Markup: grouping-blockquote.twig\n//\n// Style guide: base.grouping.blockquote\n\nblockquote {\n  // Set 1 unit of vertical rhythm on the top and bottom margin.\n  // Also indent the quote on both sides.\n  @include margin(1 $indent-amount);\n}\n\n// Lists\n//\n// Weight: -1\n//\n// Style guide: base.grouping.lists\n\n// Unordered list\n//\n// The `<ul>` element is a list of items in which the order does <em>not</em>\n// explicitly matter.\n//\n// Markup: grouping-ul.twig\n//\n// Style guide: base.grouping.lists.ul\n\n// Ordered list\n//\n// The `<ol>` element is a list of items in which the order <em>does</em>\n// explicitly matter.\n//\n// Markup: grouping-ol.twig\n//\n// Style guide: base.grouping.lists.ol\n\n// Description list\n//\n// The `<dl>` element is a list of terms with their associated descriptions.\n//\n// Markup: grouping-dl.twig\n//\n// Weight: 1\n//\n// Style guide: base.grouping.lists.dl\n\ndl,\nmenu,\nol,\nul {\n  // Address margins set differently in IE 6/7.\n  @include margin(1 0);\n}\n\n// Turn off margins on nested lists.\nol,\nul {\n  ol,\n  ul {\n    margin: 0;\n  }\n}\n\n// dt {\n//   // Add your styles.\n// }\n\ndd {\n  margin: 0 0 0 $indent-amount;\n\n  @include rtl {\n    margin: 0 $indent-amount 0 0;\n  }\n}\n\n// Address paddings set differently in IE 6/7.\nmenu,\nol,\nul {\n  padding: 0 0 0 $indent-amount;\n\n  @include rtl {\n    padding: 0 $indent-amount 0 0;\n  }\n}\n\n@if support-for(ie, 7) {\n  // Correct list images handled incorrectly in IE 7.\n  nav ul,\n  nav ol {\n    list-style: none;\n    list-style-image: none;\n  }\n}\n\n// Figures\n//\n// The `<figure>` element can be used to annotate illustrations, diagrams,\n// photos, code listings, etc.\n//\n// Optionally, a `<figcaption>` element inside the `<figure>` represents the\n// caption of the figure.\n//\n// Markup: grouping-figure.twig\n//\n// Style guide: base.grouping.figure\n\nfigure {\n  // Add the correct margin in IE 8.\n  @include margin(1 0);\n}\n\n// figcaption {\n//   // Add your styles.\n// }\n\n// Horizontal rule\n//\n// The `<hr>` element represents a paragraph-level thematic break, e.g. a scene\n// change in a story, or a transition to another topic within a section of a\n// reference book.\n//\n// Markup: grouping-hr.twig\n//\n// Style guide: base.grouping.hr\n\nhr {\n  @extend %divider;\n  // Add the correct box sizing in Firefox.\n  box-sizing: content-box;\n  height: 0;\n  // Show the overflow in Edge and IE.\n  overflow: visible;\n}\n\n// Body copy\n//\n// The default `font-size` and `line-height` properties are applied to the\n// `<body>` element and all paragraphs. In addition, `<p>` (paragraphs) receive\n// a top and bottom margin.\n//\n// Markup: grouping-p.twig\n//\n// Weight: -2\n//\n// Style guide: base.grouping.p\n\np,\npre {\n  // Set 1 unit of vertical rhythm on the top and bottom margin.\n  @include margin(1 0);\n}\n\n// Preformatted text\n//\n// The `<pre>` element represents a block of preformatted text, such as\n// fragments of computer code, ASCII art, etc.\n//\n// Markup: grouping-pre.twig\n//\n// Style guide: base.grouping.pre\n\npre {\n  @extend %monospace;\n}\n","// Embedded content\n//\n// Weight: 2\n//\n// Style guide: base.embedded\n\n// Image\n//\n// An `<img>` element represents an image.\n//\n// Markup: embedded-img.twig\n//\n// Style guide: base.embedded.img\n\nimg {\n  // Remove the border on images inside links in IE <11.\n  border-style: none;\n  @if support-for(ie, 7) {\n    // Improve image quality when scaled in IE 7.\n    // sass-lint:disable no-vendor-prefixes\n    -ms-interpolation-mode: bicubic;\n  }\n}\n\nimg,\nsvg {\n  // Suppress the space beneath the baseline\n  // vertical-align: bottom;\n\n  // Responsive images\n  max-width: 100%;\n  height: auto;\n}\n\n// Scalable vector\n//\n// A `<svg>` element represents an image encoded as a Scalable Vector Graphic.\n//\n// Markup: embedded-svg.twig\n//\n// Style guide: base.embedded.svg\n\nsvg:not(:root) {\n  // Hide the overflow in IE.\n  overflow: hidden;\n}\n","// sass-lint:disable no-vendor-prefixes, no-css-comments\n\n// Form defaults\n//\n// These are the default base styles applied to HTML form elements.\n//\n// Component classes can override these styles, but if no class applies a style\n// to an HTML form element, these styles will be the ones displayed.\n//\n// Weight: -1\n//\n// Style guide: forms.base\n\n//\n// The following rules are from normalize.css and help to fix inconsistencies\n// across various browsers. You should probably leave these rules as is and jump\n// to the \"Buttons\" rule on line 92 before you start editing this file.\n//\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  // Keep form elements constrained in their containers.\n  box-sizing: border-box;\n  max-width: 100%;\n  // Change font properties to `inherit` in all browsers (opinionated).\n  font: inherit;\n  // Remove the margin in Firefox and Safari.\n  margin: 0;\n}\n\n// Show the overflow in IE.\nbutton {\n  overflow: visible;\n}\n\n// Remove the inheritance of text transform in Edge, Firefox, and IE.\nbutton,\nselect {\n  text-transform: none;\n}\n\n// Show the overflow in Edge.\ninput {\n  overflow: visible;\n}\n\n// Correct the cursor style of increment and decrement buttons in Chrome.\n[type='number']::-webkit-inner-spin-button,\n[type='number']::-webkit-outer-spin-button {\n  height: auto;\n}\n\n[type='search'] {\n  // Correct the odd appearance in Chrome and Safari.\n  -webkit-appearance: textfield;\n  // Correct the outline style in Safari.\n  outline-offset: -2px;\n\n  // Remove the inner padding and cancel buttons in Chrome and Safari on OS X.\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n}\n\n// Correct the text style of placeholders in Chrome, Edge, and Safari.\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: .54;\n}\n\n::-webkit-file-upload-button {\n  // Correct the inability to style clickable types in iOS and Safari.\n  -webkit-appearance: button;\n  // Change font properties to `inherit` in Safari.\n  font: inherit;\n}\n\n// Buttons\n//\n// Buttons built with the `<button>` element are the most flexible for styling\n// purposes. But `<input>` elements with `type` set to `submit`, `image`,\n// `reset`, or `button` are also supported.\n//\n// Below is the default button styling. To see variations on the button styling\n// see the [button component](section-forms.html#kssref-forms-button).\n//\n// :hover        - Hover styling.\n// :active:hover - Depressed button styling.\n//\n// Markup: forms-button.twig\n//\n// Style guide: forms.base.button\n\n@import 'forms/button/button';\n\n// The %text-form-element can be used to style `<input>` text types and\n// `<textarea>` elements at the same time.\n// %text-form-element {\n//   // Add your styles.\n// }\n\n// Inputs\n//\n// The `<input>` element is mostly used for text-based inputs that include the\n// HTML5 types: `text`, `search`, `tel`, `url`, `email`, `password`, `date`,\n// `time`, `number`, `range`, `color`, and `file`.\n//\n// Markup: forms-input.twig\n//\n// Style guide: forms.base.input\n\n[type='text'],\n[type='search'],\n[type='tel'],\n[type='url'],\n[type='email'],\n[type='password'],\n[type='date'],\n[type='time'],\n[type='number'] {\n  @extend %text-form-element !optional;\n}\n\n// [type='range'] {\n//   // Add your styles.\n// }\n\n// [type='color'] {\n//   // Add your styles.\n// }\n\n// [type='file'] {\n//   // Add your styles.\n// }\n\n// Checkboxes\n//\n// If an `<input>` element has the `type='checkbox'` attribute set, the form\n// field is displayed as a checkbox.\n//\n// It's recommended that you don't attempt to style these elements. Firefox's\n// implementation doesn't respect `box-sizing`, `padding`, or `width`.\n//\n// Markup: forms-input-checkbox.twig\n//\n// Style guide: forms.base.input-checkbox\n\n// Radio buttons\n//\n// If an `<input>` element has the `type='radio'` attribute set, the form field\n// is displayed as a radio button.\n//\n// It's recommended that you don't attempt to style these elements. Firefox's\n// implementation doesn't respect `box-sizing`, `padding`, or `width`.\n//\n// Markup: forms-input-radio.twig\n//\n// Style guide: forms.base.input-radio\n\n[type='checkbox'],\n[type='radio'] {\n  // Add the correct box sizing in IE <11.\n  box-sizing: border-box;\n  // Remove the padding in IE <11.\n  padding: 0;\n}\n\n// Fieldsets\n//\n// The `<fieldset>` element groups a set of form fields, optionally under a\n// common name given by the `<legend>` element.\n//\n// Markup: forms-fieldset.twig\n//\n// Style guide: forms.base.fieldset\n\nfieldset {\n  // Change the border, margin, and padding in all browsers (opinionated).\n  @include padding(.35 .625 .65);\n  border: 1px solid color(border);\n  margin: 0 2px;\n}\n\nlegend {\n  // Correct the text wrapping in Edge and IE.\n  box-sizing: border-box;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n  // Correct the color inheritance from `fieldset` elements in IE.\n  color: inherit;\n  // Align legend text with a fieldset's text while removing left padding so\n  // people aren't caught out if they zero out fieldset padding.\n  margin-left: -5px;\n  padding: 0 5px;\n}\n\n// Labels\n//\n// The `<label>` element represents a caption of a form field. The label can be\n// associated with a specific form control by using the `for` attribute or by\n// putting the form control inside the label element itself.\n//\n// Markup: forms-label.twig\n//\n// Style guide: forms.base.label\n\nlabel {\n  // Drupal-style form labels.\n  display: block;\n  font-weight: bold;\n}\n\n// Select list\n//\n// The `<select>` element represents a form field for selecting amongst a set of\n// options.\n//\n// Known limitation: by default, Chrome and Safari on OS X allow very limited\n// styling of `<select>`, unless a `border` property is set.\n//\n// Markup: forms-select.twig\n//\n// Style guide: forms.base.select\n\n// select {\n//   // Add your styles.\n// }\n\noptgroup {\n  // Restore the font weight unset by a previous rule.\n  font-weight: bold;\n}\n\n// Text areas\n//\n// The `<textarea>` element represents a multi-line plain text form field.\n//\n// Markup: forms-textarea.twig\n//\n// Style guide: forms.base.textarea\n\ntextarea {\n  @extend %text-form-element !optional;\n  // Remove the default vertical scrollbar in IE.\n  overflow: auto;\n}\n","// Unlike most other components, the CSS for this component is included with the\n// base.css styles as it is needed for the `button` element.\n\n// Button\n//\n// In addition to the default styling of `<button>` and\n// `<input type=\"submit|image|reset|button\">` elements, the `.button` class and\n// its variants can apply buttons styles to various elements (like an `<a>`\n// link).\n//\n// :hover  - Hover styling.\n// :active - Depressed button styling.\n//\n// Markup: button.twig\n//\n// Style guide: forms.button\n\n// 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n//    controls in Android 4.\n// 2. Correct the inability to style clickable types in iOS and Safari.\n.button,\n%button,\nbutton,\n// 1\nhtml [type='button'],\n[type='reset'],\n[type='submit'] {\n  -moz-appearance: button;\n  -webkit-appearance: button; // 2\n}\n\n.button,\n%button,\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  @extend %button--disabled;\n  // Some styles don't apply to <a> links since they are inline elements by default.\n  display: inline-block;\n  padding: 2px 6px;\n  // Address Firefox 4+ setting `line-height` on `input` using `!important` in\n  // the UA stylesheet. And prevent its \"line-height: normal\" rule below from\n  // breaking the \"appearance: button\" styling on the input elements.\n  line-height: inherit;\n  text-decoration: none;\n  // Improve usability and consistency of cursor style between image-type `input` and others.\n  cursor: pointer;\n  color: color(button);\n\n  // Remove the inner border and padding in Firefox.\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n\n  // Restore the focus styles unset by the previous rule.\n  &:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    // Override any link underlines and color changes.\n    text-decoration: none;\n    color: color(button);\n  }\n}\n\n// Add button variations here.\n// .button,\n// %button {\n//   &--variant-name {\n//     // Add styles here.\n//   }\n// }\n\n// The disabled variation should always go last, so that it overrides any\n// other variations.\n%button--disabled[disabled] {\n  // Re-set default cursor for disabled elements.\n  cursor: default;\n  color: color(button-disabled);\n\n  &:hover,\n  &:focus,\n  &:active {\n    // Override any link underlines and color changes.\n    color: color(button-disabled);\n  }\n}\n","// Tables\n//\n// The `<table>` element displays tabular data in rows, columns, and cells.\n//\n// Markup: tables-table.twig\n//\n// Weight: 1\n//\n// Style guide: base.table\n\ntable {\n  // Add vertical rhythm margins.\n  @include margin(1 0);\n  // Remove most spacing between table cells.\n  border-collapse: collapse;\n  border-spacing: 0;\n  // Prevent cramped-looking tables\n  width: 100%;\n}\n\ntd,\nth {\n  // Remove most spacing between table cells.\n  padding: 0;\n}\n"]}