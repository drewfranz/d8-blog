{"version":3,"sources":["layouts/layout-3col/_layout-3col.scss","../node_modules/zen-grids/sass/zen-grids/_grids.scss","../node_modules/zen-grids/sass/zen-grids/_functions.scss","layouts/layouts.css","../node_modules/zen-grids/sass/zen-grids/_variables.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","layouts/layout-center/_layout-center.scss","layouts/layout-swap/_layout-swap.scss"],"names":[],"mappings":"AAiDA;EC+DM,iBCnE2B;EDoE3B,kBCjE0B;EDmF1B,eAAO;EACP,gBAAQ;AE/Hd;;AF2FE;EACE,WAAW;EACX,cAAc;AExFlB;;AF0FE;EACE,WAAW;EACX,cAAc;EACd,WAAW;AEvFf;;AHwCE;ECyRA,WD7Q2B;ECoTzB,iBC3U6B;ED4U7B,kBCzU4B;EDwJ9B,WGlCkB;EHmClB,WCxDsF;ED0DpF,eAf2C;EAgB3C,mBAAc;AElLlB;;AAEA;EFuLI,YChCa;EDkCX,gBAzByC;EA0BzC,kBAAc;AEtLpB;;AEgCI;ELfJ;IC+DM,iBCnE2B;IDoE3B,kBCjE0B;IDmF1B,eAAO;IACP,gBAAQ;EE5FZ;EFwDA;IACE,WAAW;IACX,cAAc;EEtDhB;EFwDA;IACE,WAAW;IACX,cAAc;IACd,WAAW;EEtDb;EH6BE;IC0HF,WGlCkB;IHmClB,WCxDsF;ID0DpF,eAf2C;IAgB3C,mBAAc;IA4Kd,iBC3U6B;ID4U7B,kBCzU4B;ECS9B;EACA;IFyJE,YChCa;IDkCX,gBAzByC;IA0BzC,kBAAc;EExJlB;EH2BE;IC+GF,WGlCkB;IHmClB,WCxDsF;ID0DpF,eAf2C;IAgB3C,mBAAc;IA4Kd,iBC3U6B;ID4U7B,kBCzU4B;ECsB9B;EACA;IF4IE,YChCa;IDkCX,gBAzByC;IA0BzC,kBAAc;EE3IlB;EHsBE;ICgPF,WD1O6B;ICiG7B,WGlCkB;IHmClB,WCxDsF;ID0DpF,iBAf2C;IAgB3C,mBAAc;IA4Kd,iBC3U6B;ID4U7B,kBCzU4B;ECoC9B;EACA;IF8HE,YChCa;IDkCX,kBAzByC;IA0BzC,kBAAc;EE7HlB;AACF;;AE1BI;EL8CA;IC0FF,WGlCkB;IHmClB,WCxDsF;ID0DpF,eAf2C;IAgB3C,mBAAc;EE1GhB;EACA;IFgHE,YChCa;IDkCX,gBAzByC;IA0BzC,kBAAc;EE/GlB;EHWE;ICsFF,WGlCkB;IHmClB,gBCxDsF;ID0DpF,eAf2C;IAgB3C,mBAAc;EE/FhB;EACA;IFqGE,YChCa;IDkCX,gBAzByC;IA0BzC,kBAAc;EEpGlB;EHIE;ICkFF,WGlCkB;IHmClB,gBCxDsF;ID0DpF,sBAf2C;IAgB3C,mBAAc;EEpFhB;EACA;IF0FE,YChCa;IDkCX,uBAzByC;IA0BzC,kBAAc;EEzFlB;EHHE;ICuNF,YDpN8B;IC2E9B,YD1EsC;IC2EtC,gBCxDsF;ID0DpF,uBAf2C;IAgB3C,kBAAc;EExEhB;EACA;IFgNI,WC/JU;EC/Cd;EACA;IF2EE,WC7BY;ID+BV,sBAzByC;IA0BzC,mBAAc;EE1ElB;EHXE;ICgNF,YD/M8B;ICsE9B,YDrEsC;ICsEtC,gBCxDsF;ID0DpF,gBAf2C;IAgB3C,kBAAc;EEzDhB;EACA;IFiMI,WC/JU;EChCd;EACA;IF4DE,WC7BY;ID+BV,eAzByC;IA0BzC,mBAAc;EE3DlB;EHrBE;IC2MF,WDzM6B;ICgE7B,WGlCkB;IHmClB,gBCxDsF;ID0DpF,eAf2C;IAgB3C,mBAAc;EE1ChB;EACA;IFgDE,YChCa;IDkCX,gBAzByC;IA0BzC,kBAAc;EE/ClB;EH3BE;ICqMF,WDnM6B;IC0D7B,WGlCkB;IHmClB,gBCxDsF;ID0DpF,sBAf2C;IAgB3C,mBAAc;EE9BhB;EACA;IFoCE,YChCa;IDkCX,uBAzByC;IA0BzC,kBAAc;EEnClB;EHjCE;IC+LF,WD7L6B;ICoD7B,WGlCkB;IHmClB,gBCxDsF;ID0DpF,sBAf2C;IAgB3C,mBAAc;EElBhB;EACA;IFwBE,YChCa;IDkCX,uBAzByC;IA0BzC,kBAAc;EEvBlB;EHvCE;IACE,aAAa;EGyCjB;AACF;;AHrCE;EC3BI,eAAO;EACP,gBAAQ;AEoEd;;AFxGE;EACE,WAAW;EACX,cAAc;AE2GlB;;AFzGE;EACE,WAAW;EACX,cAAc;EACd,WAAW;AE4Gf;;AGzLA;EL8VI,iBC3U6B;ED4U7B,kBCzU4B;EInB9B,cAAc;EAMZ,gBAA+B;AHuLnC;;AE1JI;ECtCJ;IL8VI,iBC3U6B;ID4U7B,kBCzU4B;ECgL9B;AACF;;AGlLE;;EACE,eAAe;EACf,gBAAgB;AHsLpB;;AI1NA;EAEE,kBAAkB;AJ4NpB;;AE3KI;EEnDJ;IAMI,iBAlBsC;EJ+OxC;AACF;;AEjLI;EE1CF;IAEI,kBAAkB;IAClB,MAAM;IACN,YAzBoC;IA0BpC,WAAW;EJ8Nf;AACF","file":"layouts.css","sourcesContent":["// Responsive 3-column grid\n//\n// The `.layout-3col` layout is a responsive grid layout that is:\n// - 1 column at mobile sizes\n// - 2 columns at tablet sizes\n// - 3 columns at desktop sizes\n//\n// The `.layout-3col` class is used on the container div for the layout. A *grid\n// item* in the container can be created using one of the following classes:\n//\n// - `.layout-3col__full` : 3-column wide grid item; starts a new row\n// - `.layout-3col__left-content` : 2-column wide grid item, spanning columns 1\n//   and 2; starts a new row\n// - `.layout-3col__right-content` : 2-column wide grid item, spanning columns 2\n//   and 3; starts a new row\n// - `.layout-3col__left-sidebar` : 1-column wide grid item spanning column 1;\n//   starts a new row on tablet screens\n// - `.layout-3col__first-left-sidebar` : 1-column wide grid item spanning column 1;\n//   spans column 1 and starts a new row on tablet screens only\n// - `.layout-3col__second-left-sidebar` : 1-column wide grid item spanning column 1;\n//   spans column 2 on tablet screens only\n// - `.layout-3col__right-sidebar` : 1-column wide grid item spanning column 3;\n//   starts a new row on tablet screens\n// - `.layout-3col__col-1` : 1-column wide grid item spanning column 1; starts a\n//   new row\n// - `.layout-3col__col-2` : 1-column wide grid item spanning column 2\n// - `.layout-3col__col-3` : 1-column wide grid item spanning column 3; starts a\n//   new row on tablet screens\n// - `.layout-3col__col-4` : At tablet sizes, the `__col-x` grid items will form\n//   an irregular layout of 2 items in the first row and 1 item in the second\n//   row. The `__col-4` is a \"hidden\" item that does not appear on the\n//   large-screen 3-column grid, but is a 1-column wide grid item spanning\n//   column 2 on tablet screens.\n// - `.layout-3col__col-x` : 1-column wide grid item spanning column 1; when\n//   several of these are used inside a `.layout-3col__grid-item-container` or\n//   `.layout-3col`, the first one is positioned like `__col-1`, the\n//   second like `__col-2`, etc.\n//\n// There are 2 ways to do a nested grid:\n// 1. Place a grid container div inside a grid item. Just apply the normal\n//    classes to the nested grid container and its grid items.\n// 2. The grid item's div is also the grid container for the nested grid. In\n//    this case, the `.layout3-col__grid-item-container` class should be added\n//    to the div to ensure its nested grid items align with the parent grid.\n//\n// Markup: layout-3col.twig\n//\n// Style guide: layouts.layout-3col\n\n.layout-3col,\n%layout-3col {\n  // We set the context to flow, so that this container can be used in most\n  // places in the HTML, i.e. it must be nested inside something that has\n  // padding.\n  @include zen-grid-container($context: flow);\n\n  &__full,\n  &__left-content,\n  &__right-content,\n  &__left-sidebar,\n  &__right-sidebar,\n  &__first-left-sidebar,\n  &__second-left-sidebar,\n  &__col-1,\n  &__col-2,\n  &__col-3,\n  &__col-4,\n  &__col-x {\n    @include zen-new-row(both);\n    @include zen-grid-item-base();\n    @include zen-grid-item(1, 1);\n  }\n\n  @include zen-respond-to(iPhone8PlusLandscape) {\n    // Since our container's context is \"flow\" and we changed the gutter size,\n    // we need to re-apply the container's negative left/right margins.\n    @include zen-grid-container($context: flow);\n\n    &__full,\n    &__left-content,\n    &__right-content,\n    &__left-sidebar,\n    &__right-sidebar {\n      @include zen-grid-item(2, 1);\n      // Since we changed the gutter size for this media query, we need to\n      // re-apply the padding to every grid item.\n      @include zen-apply-gutter-padding();\n    }\n\n    &__first-left-sidebar,\n    &__col-1,\n    &__col-3,\n    &__col-x:nth-child(2n + 1) {\n      @include zen-grid-item(1, 1);\n      @include zen-apply-gutter-padding();\n    }\n\n    &__second-left-sidebar,\n    &__col-2,\n    &__col-4,\n    &__col-x:nth-child(2n) {\n      // Since this inherits from the mobile layout, we have to explicitly turn\n      // off the new-row mixin.\n      @include zen-new-row(none);\n      @include zen-grid-item(1, 2);\n      @include zen-apply-gutter-padding();\n    }\n  }\n\n  @include zen-respond-to(iPadLandscape) {\n    &__full {\n      @include zen-grid-item(3, 1);\n    }\n\n    &__left-content {\n      @include zen-grid-item(2, 1);\n    }\n\n    &__right-content {\n      @include zen-grid-item(2, 2);\n    }\n\n    &__left-sidebar,\n    &__first-left-sidebar,\n    &__second-left-sidebar {\n      @include zen-new-row(right);\n      @include zen-grid-item(1, 3, right);\n    }\n\n    &__right-sidebar {\n      @include zen-new-row(right);\n      @include zen-grid-item(1, 1, right);\n    }\n\n    &__col-1,\n    &__col-x:nth-child(3n+1) {\n      @include zen-new-row(both);\n      @include zen-grid-item(1, 1);\n    }\n\n    &__col-2,\n    &__col-x:nth-child(3n+2) {\n      @include zen-new-row(none);\n      @include zen-grid-item(1, 2);\n    }\n\n    &__col-3,\n    &__col-x:nth-child(3n) {\n      @include zen-new-row(none);\n      @include zen-grid-item(1, 3);\n    }\n\n    &__col-4 {\n      display: none;\n    }\n  }\n\n  // Place last so it can override the padding of grid items.\n  &__grid-item-container {\n    @include zen-grid-container($context: grid-item);\n  }\n}\n","// Grids module\n//\n// The “grids” module contains most of the configurable variables and mixins you’ll need to create a layout.\n//\n// Weight: -10\n//\n// Style guide: grids\n\n// Import the global variables needed by all of Zen Grids.\n@import \"./variables\";\n// Import the helper functions.\n@import \"./functions\";\n\n// zen-rtl()\n//\n// Includes inline Right-To-Left language support if the `$zen-rtl-selector` variable is set to `[dir=\"rtl\"]` or some other useful CSS selector.\n//\n// Since `$zen-rtl-selector` defaults to `false`, inline Right-To-Left language support is off by default.\n//\n// $selector = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 20\n//\n// Style guide: grids.zen-rtl\n\n@mixin zen-rtl($selector: $zen-rtl-selector) {\n  @if $selector {\n    @if & {\n      #{$selector} & {\n        @content;\n      }\n    }\n    @else {\n      #{$selector} {\n        @content;\n      }\n    }\n  }\n}\n\n// zen-grid-container()\n//\n// Apply this to create a grid container element.\n//\n// If this grid is nested inside another grid, the `$context` parameter can be used to align the nested grid with the parent grid. `$context` can be set to `none` (the default), `grid-item`, or `flow`.\n//\n// If the nested grid’s container is a child element of the parent grid’s grid item, set `$context: flow`.\n//\n// Otherwise, if the nested grid’s container is the same element as the parent grid’s grid item, set `$context: grid-item` and apply this mixin *after* the [`zen-grid-item()`](#kssref-grids-zen-grid-item) mixin is applied for the parent grid. This mixin removes any gutters on the container since the nested grid will have its own gutters.\n//\n// Common usage:\n// ```\n// @include zen-grid-container();\n// ```\n// or:\n// ```\n// @include zen-grid-container(grid-item);\n// ```\n//\n// $context            = none - If this grid is nested inside another grid, the `$context` parameter can be used to align the nested grid with the parent grid. It can be set to `none`, `grid-item`, or `flow`.\n// $gutters            = $zen-gutters - The width of the gutters for this container. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this container. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $direction          = $zen-direction - The direction to use for this container. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this container. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this container. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// Style guide: grids.zen-grid-container\n@mixin zen-grid-container(\n  $context            : none,\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n\n  @if $context == flow-item {\n    @warn \"zen-grid-container()'s $context cannot be set to: flow-item. It has been set to: flow.\";\n    $context: flow;\n  }\n  @else if $context == grid {\n    @warn \"zen-grid-container()'s $context cannot be set to: grid. It has been set to: grid-item.\";\n    $context: grid-item;\n  }\n\n  // @TODO: This is a pre-IE8 line of code; don't remember why its needed.\n  @if zen-support-for-ie(7) {\n    *position: relative;\n  }\n\n  // We use the \"micro clearfix\", optimized to reduce the number of &.\n  &:before {\n    content: \"\";\n    display: table;\n  }\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n  @if zen-support-for-ie(7) {\n    *zoom: 1;\n  }\n\n  // Un-do the gutter padding of the parent grid item.\n  @if $context == flow and $gutter-method == padding {\n    margin: {\n      left: -(zen-half-gutter($gutters, left, $dir));\n      right: -(zen-half-gutter($gutters, right, $dir));\n    }\n\n    // If $gutters is an odd number of pixels, we need special RTL handling.\n    @if zen-half-gutter($gutters, left, $dir) != zen-half-gutter($gutters, right, $dir) {\n      @include zen-rtl($rtl-selector) {\n        margin: {\n          left: -(zen-half-gutter($gutters, right, $dir));\n          right: -(zen-half-gutter($gutters, left, $dir));\n        }\n      }\n    }\n  }\n\n  // Prevent any padding from messing up the alignment of the nested grid.\n  @if $context == grid-item or $context == flow {\n    // Copy of undo-zen-apply-gutter-padding()\n    padding: {\n      left: 0;\n      right: 0;\n    }\n  }\n}\n\n// zen-grid-item()\n//\n// Apply this to each grid item. Set the `$column-span` to the number of columns that the grid item spans. And set the `$column-position` to the column number the grid item starts on.\n//\n// To make the grid item float from the right, set the `$direction` to `right`; it defaults to `left` (the value of `$zen-direction`.) For grid items that are floated right, the `$column-position` is counted from the right instead of from the left.\n//\n// Common usage:\n// ```\n// // The grid item spans 2 columns starting from the 3rd column from the left,\n// // e.g. It spans columns 3 and 4 counting from the left.\n// @include zen-grid-item($column-span: 2, $column-position: 3);\n// ```\n// or:\n// ```\n// // The grid item spans 2 columns starting from the 3rd column from the right,\n// // e.g. It spans columns 3 and 4 counting from the right.\n// @include zen-grid-item(2, 3, right);\n// ```\n//\n// $column-span        - Required. The number of columns the grid item will span.\n// $column-position    - Required. The column number the grid item starts on.\n// $direction          = $zen-direction - The floating direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $gutters            = $zen-gutters - The width of the gutters for this grid item. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this grid item. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $box-sizing         = $zen-box-sizing - The box sizing to use for this grid item. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n// $include-base       = $zen-auto-include-grid-item-base - Whether to auto-include the zen-grid-item-base() mixin. See the docs for [`$zen-auto-include-grid-item-base`](section-grids.html#kssref-grids-variables-zen-auto-include-grid-item-base).\n//\n// Style guide: grids.zen-grid-item\n@mixin zen-grid-item(\n  $column-span,\n  $column-position,\n  $direction          : $zen-direction,\n  $columns            : $zen-columns,\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $grid-width         : $zen-grid-width,\n  $box-sizing         : $zen-box-sizing,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector,\n  $include-base       : $zen-auto-include-grid-item-base\n) {\n\n  // Calculate the unit width.\n  $unit-width: zen-unit-width($columns, $gutters, $gutter-method, $grid-width);\n\n  // Calculate the item's width.\n  $width: zen-grid-item-width($column-span, $columns, $gutters, $gutter-method, $grid-width, $box-sizing);\n\n  // Calculate the margin from the container's edge.\n  $margin: ($column-position - 1) * $unit-width;\n  @if $gutter-method == margin {\n    $margin: $margin + (floor($column-position) - 1) * $gutters;\n  }\n\n  // Determine the float direction and its reverse.\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n  $rev: zen-direction-switch($dir);\n\n  float: $dir;\n  width: $width;\n  margin: {\n    #{$dir}: $margin;\n    #{$rev}: -100%;\n  }\n  @if zen-support-for-ie(7) {\n    // @TODO: This interpolation fails on libsass 3.3.0: *margin-#{$rev}: -99.9%;\n    #{'*margin-' + $rev}: -99.9%;\n  }\n  @include zen-rtl($rtl-selector) {\n    float: $rev;\n    margin: {\n      #{$rev}: $margin;\n      #{$dir}: -100%;\n    }\n    @if zen-support-for-ie(7) {\n      // @TODO: This interpolation fails on libsass 3.3.0: *margin-#{$rev}: -99.9%;\n      #{'*margin-' + $dir}: -99.9%;\n    }\n  }\n\n  // Include the grid item base mixin.\n  @if $include-base {\n    @include zen-grid-item-base($gutters, $gutter-method, $box-sizing, $direction, $switch-direction, $rtl-selector);\n  }\n  // If the $gutters parameter has been used, set the gutters even if\n  // $include-base is false.\n  @else if $gutters != $zen-gutters and $gutter-method == padding {\n    @include zen-apply-gutter-padding($gutters, $direction, $switch-direction, $rtl-selector);\n  }\n}\n\n// zen-grid-item-base()\n//\n// Applies a standard set of properties for grid items in the layout.\n//\n// See the documentation for the [`$zen-auto-include-grid-item-base`](#kssref-grids-variables-zen-auto-include-grid-item-base) and [`$zen-auto-include-flow-item-base`](section-flow.html#kssref-flow-variables-zen-auto-include-flow-item-base) variables for when to use this mixin.\n//\n// Common usage:\n// ```\n// @include zen-grid-item-base();\n// ```\n//\n// $gutters            = $zen-gutters - The width of the gutters for this grid item. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method      = $zen-gutter-method - The gutter method to use for this grid item. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $box-sizing         = $zen-box-sizing - The box sizing to use for this grid item. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n// $direction          = $zen-direction - The floating direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction   = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector       = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 10\n//\n// Style guide: grids.zen-grid-item-base\n@mixin zen-grid-item-base(\n  $gutters            : $zen-gutters,\n  $gutter-method      : $zen-gutter-method,\n  $box-sizing         : $zen-box-sizing,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  // Specify the padding if the gutter method uses padding.\n  @if $gutter-method == padding {\n    @include zen-apply-gutter-padding($gutters, $direction, $switch-direction, $rtl-selector);\n  }\n\n  // Specify the border-box properties.\n  @if $box-sizing == border-box {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n  // Prevent left/right borders since they'll break the layout with content-box.\n  @else if $box-sizing == content-box {\n    border: {\n      left: 0 !important;\n      right: 0 !important;\n    }\n    @if $gutter-method == margin {\n      padding: {\n        left: 0 !important;\n        right: 0 !important;\n      }\n    }\n  }\n\n  @if zen-support-for-ie(7) {\n    @if $box-sizing == border-box and $box-sizing-polyfill-path == \"\" {\n      @warn 'Setting $box-sizing to border-box will fail for IE 7 and earlier because the $box-sizing-polyfill-path is empty.';\n    }\n    @if $box-sizing-polyfill-path != \"\" {\n      *behavior: url($box-sizing-polyfill-path);\n    }\n    @if zen-support-for-ie(6) {\n      // Display inline or double your floated margin!\n      // @see http://www.positioniseverything.net/explorer/doubled-margin.html\n      _display: inline;\n      // Prevent overflowing content from breaking the layout.\n      _overflow: hidden;\n      // In IE6, overflow visible is broken.\n      // @see http://www.howtocreate.co.uk/wrongWithIE/?chapter=overflow%3Avisible%3B\n      _overflow-y: visible;\n    }\n    // Prevent overflowing content from being hidden beneath other grid items.\n    *word-wrap: break-word;\n  }\n}\n\n// zen-new-row()\n//\n// Apply this to a grid item so that it starts a new row.\n//\n// Common usage:\n// ```\n// @include zen-new-row();\n// ```\n// or:\n// ```\n// @include zen-new-row(right);\n// ```\n//\n// $clear             = $zen-direction - The floating direction to use for this grid item. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction  = $zen-switch-direction - Whether to switch the default direction for this grid item. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector      = $zen-rtl-selector - The RTL selector for this grid item. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// Style guide: grids.zen-new-row\n@mixin zen-new-row(\n  $clear              : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n  // Determine the clearing direction.\n  @if $switch-direction {\n    $clear: zen-direction-switch($clear);\n  }\n  clear: $clear;\n\n  @if $clear == left or $clear == right {\n    @include zen-rtl($rtl-selector) {\n      clear: zen-direction-switch($clear);\n    }\n  }\n}\n\n// zen-apply-gutter-padding()\n//\n// Applies the gutter to a grid item when using the padding gutter method.\n//\n// Common usage:\n// ```\n// @include zen-apply-gutter-padding();\n// ```\n//\n// $gutters           = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $direction         = $zen-direction - The floating direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n// $switch-direction  = $zen-switch-direction - Whether to switch the default direction. See the docs for [`$zen-switch-direction`](section-grids.html#kssref-grids-variables-rtl-zen-switch-direction).\n// $rtl-selector      = $zen-rtl-selector - The RTL selector. See the docs for [`$zen-rtl-selector`](section-grids.html#kssref-grids-variables-rtl-zen-rtl-selector).\n//\n// weight: 30\n//\n// Style guide: grids.zen-apply-gutter-padding\n@mixin zen-apply-gutter-padding(\n  $gutters            : $zen-gutters,\n  $direction          : $zen-direction,\n  $switch-direction   : $zen-switch-direction,\n  $rtl-selector       : $zen-rtl-selector\n) {\n\n  $dir: $direction;\n  @if $switch-direction {\n    $dir: zen-direction-switch($dir);\n  }\n\n  padding: {\n    left: zen-half-gutter($gutters, left, $dir);\n    right: zen-half-gutter($gutters, right, $dir);\n  }\n\n  // If $gutters is an odd number of pixels, we need special RTL handling.\n  @if zen-half-gutter($gutters, left, $dir) != zen-half-gutter($gutters, right, $dir) {\n    @include zen-rtl($rtl-selector) {\n      padding: {\n        left: zen-half-gutter($gutters, right, $dir);\n        right: zen-half-gutter($gutters, left, $dir);\n      }\n    }\n  }\n}\n","// Helper functions module\n//\n// Helper functions for the Zen Grids mixins.\n//\n// This module contains many Sass functions that you may find useful in your style sheet. These functions are also used internally by all of the mixins in Zen Grids.\n//\n// Weight: 10\n//\n// Style guide: functions\n\n\n@import \"./variables\";\n\n\n// zen-half-gutter()\n//\n// Returns a half gutter width.\n//\n// If the gutter width is in pixels and is an odd number, then `$gutter-side: left` will return half of the gutter rounded down to a whole pixel; `$gutter-side: right` will return half of the gutter rounded up to a whole pixel. The `$gutter-side` defaults to [`$zen-direction`](#zen-direction).\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-half-gutter();\n//   // or:\n//   property: zen-half-gutter($gutter-side: [left or right]);\n// }\n// ```\n//\n// $gutters     = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-side = $zen-direction - The side of the grid item the gutter is needed for.\n// $direction   = $zen-direction - The direction to use. See the docs for [`$zen-direction`](section-grids.html#kssref-grids-variables-rtl-zen-direction).\n//\n// weight: -1\n//\n// Style guide: functions.zen-half-gutter\n@function zen-half-gutter(\n  $gutters          : $zen-gutters,\n  $gutter-side      : $zen-direction,\n  $direction        : $zen-direction\n) {\n  $half-gutter: $gutters / 2;\n  // Special handling in case gutter has an odd number of pixels.\n  @if unit($gutters) == \"px\" {\n    @if $gutter-side == $direction {\n      @return floor($half-gutter);\n    }\n    @else {\n      @return ceil($half-gutter);\n    }\n  }\n  @return $half-gutter;\n}\n\n// zen-compare-units()\n//\n// Internal function. Warns if the gutter and grid width units are not comparable. It does not throw an `@error` because the line following the call to `zen-compare-units()` will cause a Sass math error with the a line number that is more useful than if it were to fail here.\n//\n// No style guide\n@function zen-compare-units(\n  $feature,\n  $gutters        : $zen-gutters,\n  $grid-width     : $zen-grid-width\n) {\n  @if not comparable($gutters, $grid-width) {\n    $units-gutter: unit($gutters);\n    $units-grid: unit($grid-width);\n    @warn \"The layout cannot be calculated correctly; when using #{$feature}, the units of the gutter (#{$units-gutter} must match the units of the grid width (#{$units-grid}).\";\n    @return false;\n  }\n  @return true;\n}\n\n// zen-unit-width()\n//\n// Returns the unit width of a single column in the grid.\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-unit-width();\n// }\n// ```\n//\n// $columns       = $zen-columns - The number of columns in the grid. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters       = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width    = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n//\n// weight: -1\n//\n// Style guide: functions.zen-unit-width\n@function zen-unit-width(\n  $columns        : $zen-columns,\n  $gutters        : $zen-gutters,\n  $gutter-method  : $zen-gutter-method,\n  $grid-width     : $zen-grid-width\n) {\n  $unit-width: 0;\n  @if $gutter-method == margin {\n    $test: zen-compare-units('gutter-method: margin', $gutters, $grid-width);\n    $unit-width: ($grid-width - ($columns - 1) * $gutters) / $columns;\n  }\n  @else {\n    $unit-width: $grid-width / $columns;\n  }\n  @if unit($unit-width) == \"px\" and floor($unit-width) != ceil($unit-width) {\n    @if $gutter-method == margin {\n      $num_gutters: $columns - 1;\n      @warn \"You may experience rounding errors as the grid width, #{$grid-width}, does not divide evenly into #{$columns} columns with #{$num_gutters} of #{$gutters} gutters.\";\n    }\n    @else {\n      @warn \"You may experience rounding errors as the grid width, #{$grid-width}, does not divide evenly into #{$columns} columns.\";\n    }\n  }\n  @return $unit-width;\n}\n\n// zen-grid-item-width()\n//\n// Calculates the width of a grid item that spans the specified number of columns.\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-grid-item-width([number]);\n// }\n// ```\n//\n// $column-span   - Required. The number of columns to calculate the width of.\n// $columns       = $zen-columns - The number of columns in the grid. See the docs for [`$zen-columns`](section-grids.html#kssref-grids-variables-zen-columns).\n// $gutters       = $zen-gutters - The width of the gutters. See the docs for [`$zen-gutters`](section-grids.html#kssref-grids-variables-zen-gutters).\n// $gutter-method = $zen-gutter-method - The gutter method to use. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-zen-gutter-method).\n// $grid-width    = $zen-grid-width - The width of the entire grid. See the docs for [`$zen-gutter-method`](section-grids.html#kssref-grids-variables-fixed-zen-grid-width).\n// $box-sizing    = $zen-box-sizing - The box sizing to use. See the docs for [`$zen-box-sizing`](section-grids.html#kssref-grids-variables-zen-box-sizing).\n//\n// Style guide: functions.zen-grid-item-width\n@function zen-grid-item-width(\n  $column-span,\n  $columns        : $zen-columns,\n  $gutters        : $zen-gutters,\n  $gutter-method  : $zen-gutter-method,\n  $grid-width     : $zen-grid-width,\n  $box-sizing     : $zen-box-sizing\n) {\n  $width: $column-span * zen-unit-width($columns, $gutters, $gutter-method, $grid-width);\n\n  // Add the margin gutters internal to the spanning grid item.\n  @if $gutter-method == margin {\n    $width: $width + (floor($column-span) - 1) * $gutters;\n  }\n  // For the original box model, remove the padding from the width.\n  @else if $box-sizing == content-box {\n    $test: zen-compare-units('box-sizing: content-box', $gutters, $grid-width);\n    $width: $width - $gutters;\n  }\n  @return $width;\n}\n\n// zen-direction-switch()\n//\n// Returns the opposite direction, given \"left\" or \"right\".\n//\n// Common usage:\n// ```\n// .ex {\n//   property: zen-direction-switch([left or right]);\n// }\n// ```\n//\n// $direction - Required. The direction you want to switch.\n//\n// weight: 1\n//\n// Style guide: functions.zen-direction-switch\n@function zen-direction-switch(\n  $direction\n) {\n  @if $direction == left {\n    @return right;\n  }\n  @else if $direction == right {\n    @return left;\n  }\n  @else if $direction != none and $direction != both {\n    @warn \"Invalid direction passed to zen-direction-switch().\";\n  }\n  @return $direction;\n}\n\n// zen-support-for-ie()\n//\n// Internal function. If you've installed support-for, this function will tell you if IE 6 or IE 7 should be supported. If support-for is not installed, this function always returns false.\n//\n// No style guide\n@function zen-support-for-ie($min-version) {\n  @if function-exists('support-for') {\n    @return support-for(ie, $min-version);\n  }\n  @else {\n    @return false;\n  }\n}\n",".layout-3col {\n  margin-left: -5px;\n  margin-right: -5px;\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.layout-3col:before {\n  content: \"\";\n  display: table;\n}\n\n.layout-3col:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.layout-3col__full, .layout-3col__left-content, .layout-3col__right-content, .layout-3col__left-sidebar, .layout-3col__right-sidebar, .layout-3col__first-left-sidebar, .layout-3col__second-left-sidebar, .layout-3col__col-1, .layout-3col__col-2, .layout-3col__col-3, .layout-3col__col-4, .layout-3col__col-x {\n  clear: both;\n  padding-left: 5px;\n  padding-right: 5px;\n  float: left;\n  width: 100%;\n  margin-left: 0%;\n  margin-right: -100%;\n}\n\n[dir=\"rtl\"] .layout-3col__full, [dir=\"rtl\"] .layout-3col__left-content, [dir=\"rtl\"] .layout-3col__right-content, [dir=\"rtl\"] .layout-3col__left-sidebar, [dir=\"rtl\"] .layout-3col__right-sidebar, [dir=\"rtl\"] .layout-3col__first-left-sidebar, [dir=\"rtl\"] .layout-3col__second-left-sidebar, [dir=\"rtl\"] .layout-3col__col-1, [dir=\"rtl\"] .layout-3col__col-2, [dir=\"rtl\"] .layout-3col__col-3, [dir=\"rtl\"] .layout-3col__col-4, [dir=\"rtl\"] .layout-3col__col-x {\n  float: right;\n  margin-right: 0%;\n  margin-left: -100%;\n}\n\n@media (min-width: 736px) {\n  .layout-3col {\n    margin-left: -5px;\n    margin-right: -5px;\n    padding-left: 0;\n    padding-right: 0;\n  }\n  .layout-3col:before {\n    content: \"\";\n    display: table;\n  }\n  .layout-3col:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n  .layout-3col__full, .layout-3col__left-content, .layout-3col__right-content, .layout-3col__left-sidebar, .layout-3col__right-sidebar {\n    float: left;\n    width: 200%;\n    margin-left: 0%;\n    margin-right: -100%;\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n  [dir=\"rtl\"] .layout-3col__full, [dir=\"rtl\"] .layout-3col__left-content, [dir=\"rtl\"] .layout-3col__right-content, [dir=\"rtl\"] .layout-3col__left-sidebar, [dir=\"rtl\"] .layout-3col__right-sidebar {\n    float: right;\n    margin-right: 0%;\n    margin-left: -100%;\n  }\n  .layout-3col__first-left-sidebar, .layout-3col__col-1, .layout-3col__col-3, .layout-3col__col-x:nth-child(2n + 1) {\n    float: left;\n    width: 100%;\n    margin-left: 0%;\n    margin-right: -100%;\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n  [dir=\"rtl\"] .layout-3col__first-left-sidebar, [dir=\"rtl\"] .layout-3col__col-1, [dir=\"rtl\"] .layout-3col__col-3, [dir=\"rtl\"] .layout-3col__col-x:nth-child(2n + 1) {\n    float: right;\n    margin-right: 0%;\n    margin-left: -100%;\n  }\n  .layout-3col__second-left-sidebar, .layout-3col__col-2, .layout-3col__col-4, .layout-3col__col-x:nth-child(2n) {\n    clear: none;\n    float: left;\n    width: 100%;\n    margin-left: 100%;\n    margin-right: -100%;\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n  [dir=\"rtl\"] .layout-3col__second-left-sidebar, [dir=\"rtl\"] .layout-3col__col-2, [dir=\"rtl\"] .layout-3col__col-4, [dir=\"rtl\"] .layout-3col__col-x:nth-child(2n) {\n    float: right;\n    margin-right: 100%;\n    margin-left: -100%;\n  }\n}\n\n@media (min-width: 1112px) {\n  .layout-3col__full {\n    float: left;\n    width: 100%;\n    margin-left: 0%;\n    margin-right: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__full {\n    float: right;\n    margin-right: 0%;\n    margin-left: -100%;\n  }\n  .layout-3col__left-content {\n    float: left;\n    width: 66.66667%;\n    margin-left: 0%;\n    margin-right: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__left-content {\n    float: right;\n    margin-right: 0%;\n    margin-left: -100%;\n  }\n  .layout-3col__right-content {\n    float: left;\n    width: 66.66667%;\n    margin-left: 33.33333%;\n    margin-right: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__right-content {\n    float: right;\n    margin-right: 33.33333%;\n    margin-left: -100%;\n  }\n  .layout-3col__left-sidebar, .layout-3col__first-left-sidebar, .layout-3col__second-left-sidebar {\n    clear: right;\n    float: right;\n    width: 33.33333%;\n    margin-right: 66.66667%;\n    margin-left: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__left-sidebar, [dir=\"rtl\"] .layout-3col__first-left-sidebar, [dir=\"rtl\"] .layout-3col__second-left-sidebar {\n    clear: left;\n  }\n  [dir=\"rtl\"] .layout-3col__left-sidebar, [dir=\"rtl\"] .layout-3col__first-left-sidebar, [dir=\"rtl\"] .layout-3col__second-left-sidebar {\n    float: left;\n    margin-left: 66.66667%;\n    margin-right: -100%;\n  }\n  .layout-3col__right-sidebar {\n    clear: right;\n    float: right;\n    width: 33.33333%;\n    margin-right: 0%;\n    margin-left: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__right-sidebar {\n    clear: left;\n  }\n  [dir=\"rtl\"] .layout-3col__right-sidebar {\n    float: left;\n    margin-left: 0%;\n    margin-right: -100%;\n  }\n  .layout-3col__col-1, .layout-3col__col-x:nth-child(3n+1) {\n    clear: both;\n    float: left;\n    width: 33.33333%;\n    margin-left: 0%;\n    margin-right: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__col-1, [dir=\"rtl\"] .layout-3col__col-x:nth-child(3n+1) {\n    float: right;\n    margin-right: 0%;\n    margin-left: -100%;\n  }\n  .layout-3col__col-2, .layout-3col__col-x:nth-child(3n+2) {\n    clear: none;\n    float: left;\n    width: 33.33333%;\n    margin-left: 33.33333%;\n    margin-right: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__col-2, [dir=\"rtl\"] .layout-3col__col-x:nth-child(3n+2) {\n    float: right;\n    margin-right: 33.33333%;\n    margin-left: -100%;\n  }\n  .layout-3col__col-3, .layout-3col__col-x:nth-child(3n) {\n    clear: none;\n    float: left;\n    width: 33.33333%;\n    margin-left: 66.66667%;\n    margin-right: -100%;\n  }\n  [dir=\"rtl\"] .layout-3col__col-3, [dir=\"rtl\"] .layout-3col__col-x:nth-child(3n) {\n    float: right;\n    margin-right: 66.66667%;\n    margin-left: -100%;\n  }\n  .layout-3col__col-4 {\n    display: none;\n  }\n}\n\n.layout-3col__grid-item-container {\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.layout-3col__grid-item-container:before {\n  content: \"\";\n  display: table;\n}\n\n.layout-3col__grid-item-container:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.layout-center {\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 0 auto;\n  max-width: 965px;\n}\n\n@media (min-width: 736px) {\n  .layout-center {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n}\n\n.layout-center--shared-grid,\n.layout-center.layout-3col {\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.layout-swap {\n  position: relative;\n}\n\n@media (min-width: 568px) {\n  .layout-swap {\n    padding-top: 48px;\n  }\n}\n\n@media (min-width: 568px) {\n  .layout-swap__top {\n    position: absolute;\n    top: 0;\n    height: 48px;\n    width: 100%;\n  }\n}\n","//\n// Variables module for the Zen Grids system; auto-imported by other modules.\n//\n\n\n\n//\n// Grids Module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: grids.variables\n\n// $zen-columns\n//\n// Specifies the number of columns in the grid. Defaults to 1 as a hat tip to mobile first designs. You should set this variable each time you want to use a different grid for a set of media queries.\n//\n// ```\n// $zen-columns: 1 !default;\n// ```\n//\n// weight: -2\n//\n// Style guide: grids.variables.zen-columns\n$zen-columns: 1 !default;\n\n// $zen-gutters\n//\n// Specifies the width of each gutter, the horizontal space between two adjacent grid items.\n//\n// For a sense of aesthetics, we suggest this value could be proportional to your base font by setting `$zen-gutters` equal to a multiple of your base line height.\n//\n// If the [`$zen-gutter-method`](#zen-gutter-method) is set to `margin`, the unit of measurement of the gutters should be the same as the unit of measurement of the [`$zen-grid-width`](#zen-grid-width), e.g. if `$zen-grid-width: 100%`, then `$zen-gutters` should also be measured in `%`.\n//\n// ```\n// $zen-gutters: 20px !default;\n// ```\n//\n// weight: -2\n//\n// Style guide: grids.variables.zen-gutters\n$zen-gutters: 20px !default;\n\n// $zen-gutter-method\n//\n// Specifies the type of gutters used for the grid, can be set to `padding` (the default) or `margin`.\n// If the “padding” gutter method is chosen, half of the gutter will be placed on each side of a grid item (as padding). This means there will be a full gutter between the content of adjacent grid items and half of a gutter on each edge of the grid.\n//\n// <figure class=\"ex-gutter-method ex-gutter-method-padding\">\n//   <div class=\"ex-gutter-method__container\">\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-1\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-2\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-3\">\n//       <p>A grid item.</p>\n//     </div>\n//   </div>\n// </figure>\n//\n// If the “margin” gutter method is chosen, a full gutter will be placed between each grid item (as margin), but no gutter will be placed on each edge of the grid.\n//\n// <figure class=\"ex-gutter-method ex-gutter-method-margin\">\n//   <div class=\"ex-gutter-method__container\">\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-1\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-2\">\n//       <p>A grid item.</p>\n//     </div>\n//     <div class=\"ex-gutter-method__content ex-gutter-method__content-3\">\n//       <p>A grid item.</p>\n//     </div>\n//   </div>\n// </figure>\n//\n// Note: that the “margin” gutter method requires that the gutters and the width of the grid have the same unit of measurement, e.g. both be measured in `%` or both in `px`. This means that a fluid, responsive layout using the “margin” gutter method will have gutters that are `%`-based. This is why the default gutter method is “padding”; the grid can be `%`-based, while the gutters remain a fixed measurement (like `20px` or `5 em`) at all viewport sizes.\n//\n// ```\n// $zen-gutter-method: padding !default;\n// ```\n//\n// weight: -1\n//\n// Style guide: grids.variables.zen-gutter-method\n$zen-gutter-method: padding !default;\n\n// $zen-auto-include-grid-item-base\n//\n// You can generate more efficient CSS if you set this to `false` and manually apply the [`zen-grid-item-base()`](#zen-grid-item-base) mixin to all grid items (and flow items) from within a single ruleset.\n//\n// ```\n// $zen-auto-include-grid-item-base: true !default;\n// ```\n//\n// Style guide: grids.variables.zen-auto-include-grid-item-base\n$zen-auto-include-grid-item-base: true !default;\n\n// $zen-box-sizing\n//\n// Specify the CSS3 box-sizing method. The default, \"border-box\", is compatible with all modern browsers, including IE 8 and later.\n//\n// Some developers use a universal selector to apply CSS’s “border-box” box sizing to all elements. Paul Irish describes this method in more detail in his blog post “[* { Box-sizing: Border-box } FTW](http://www.paulirish.com/2012/box-sizing-border-box-ftw/)”. Since Zen Grids will automatically add `box-sizing: border-box;` to those elements that need it, you can prevent it from outputting redundant `box-sizing` properties by setting `$zen-box-sizing` to `universal-border-box`.\n//\n// To add IE6 and IE7 support, you’ll need to set [`$support-for`](#support-for) to `(ie: 6)` and then either use a polyfill (see [`$box-sizing-polyfill-path`](#box-sizing-polyfill-path)) or set `$zen-box-sizing` to \"content-box\".\n//\n// Note: if `$zen-box-sizing` is set to \"content-box\", then [`$zen-gutters`](#zen-gutters) will need to use the same unit of measurement as the [`$zen-grid-width`](#zen-grid-width).\n//\n// ```\n// $zen-box-sizing: border-box !default;\n// ```\n//\n// weight: 1\n//\n// Style guide: grids.variables.zen-box-sizing\n$zen-box-sizing: border-box !default;\n\n\n//\n// Grids Module: fixed variables\n//\n\n// Adaptive or fixed design variable\n//\n// Weight: 10\n//\n// Style guide: grids.variables.fixed\n\n// $zen-grid-width\n//\n// Specify the width of the entire grid. Defaults to `100%` for a fluid responsive design, but you can change this to any fixed value (using px or em, etc.) if you need a fixed grid.\n//\n// ```\n// $zen-grid-width: 100% !default;\n// ```\n//\n// Style guide: grids.variables.fixed.zen-grid-width\n$zen-grid-width: 100% !default;\n\n\n//\n// Grids Module: rtl variables\n//\n\n// RTL language variables\n//\n// Weight: 15\n//\n// Style guide: grids.variables.rtl\n\n// $zen-direction\n//\n// Specify the default floating direction for zen grids’ mixins. If you are only building RTL layouts (and not LTR layouts), you should set this to `right`.\n//\n// ```\n// $zen-direction: left !default;\n// ```\n//\n// Style guide: grids.variables.rtl.zen-direction\n$zen-direction: left !default;\n\n// $zen-rtl-selector\n//\n// If you wish to output both LTR layouts and RTL layouts simultaneously, you can specify the parent selector that should be used to trigger an RTL override for any of Zen Grids' direction-specific CSS.\n//\n// For example, setting this:\n// ```\n// $zen-rtl-selector: '[dir=\"rtl\"]';\n// ```\n//\n// After building a layout with Zen Grids' mixins, the CSS output will look similar to this:\n// ```\n// .my-layout-column {\n//   margin-left: 20%;\n//   margin-right: -100%;\n// }\n// [dir=\"rtl\"] .my-layout-column {\n//   margin-left: -100%;\n//   margin-right: 20%;\n// }\n// ```\n//\n// ```\n// $zen-rtl-selector: false !default;\n// ```\n//\n// Style guide: grids.variables.rtl.zen-rtl-selector\n$zen-rtl-selector: false !default;\n\n// $zen-switch-direction\n//\n// Reverse the floating direction in all of zen grids’ mixins.\n//\n// If you are creating LTR and RTL layouts that are in separate style sheets, this helper variable can be used to automatically create one set of layouts based on the other set of layouts. For example:\n//\n// ```\n// $zen-switch-direction: true;\n// @import \"an-LTR-layout\";\n// ```\n//\n// In the above example, the existing LTR layout in the an-LTR-layout.scss file is used to create the corresponding RTL layout by first setting the `$zen-switch-direction` variable to `true` and then importing the LTR layout file.\n//\n// ```\n// $zen-switch-direction: false !default;\n// ```\n//\n// Style guide: grids.variables.rtl.zen-switch-direction\n$zen-switch-direction: false !default;\n\n\n//\n// Grids Module: legacy IE variables\n//\n\n// Legacy IE support variables\n//\n// IE 6 and 7 require special CSS properties in order for Zen Grids to work with\n// such old browsers.\n//\n// If you need IE 6/7 support, you will need to install:\n//\n// 1. [support-for]() Sass module\n// 2. [box-sizing polyfill](https://github.com/Schepp/box-sizing-polyfill)'s boxsizing.htc\n//\n// Weight: 20\n//\n// Style guide: grids.variables.legacy\n\n// $box-sizing-polyfill-path\n//\n// The box-sizing polyfill for IE 6/7 requires an absolute path to the boxsizing.htc file. See https://github.com/Schepp/box-sizing-polyfill\n//\n// ```\n// $box-sizing-polyfill-path: '' !default;\n// ```\n//\n// Style guide: grids.variables.legacy.box-sizing-polyfill-path\n$box-sizing-polyfill-path: '' !default;\n\n// $support-for\n//\n// Specify the minimum browser versions that must be supported. Currently, Zen Grids only uses the `ie` value to determine if additional CSS properties are needed for IE 6 and IE 7 support. For example, to add support for IE 7, set `$support-for: (ie: 7);`\n//\n// This variable is _only_ used if the [support-for](https://github.com/JohnAlbin/support-for) module is loaded into your Sass style sheet. Otherwise, legacy IE support will not be included in your layouts. Zen Grids does not require support-for, but will use it if available.\n//\n// ```\n// $support-for: (\n//   chrome:  -4,\n//   edge:    -4,\n//   firefox: -4,\n//   ie:      9,\n//   opera:   -4,\n//   safari:  -4,\n//   '*':     -4,\n// ) !default;\n// ```\n//\n// Weight: -1\n//\n// Style guide: grids.variables.legacy.support-for\n\n\n\n//\n// Flow module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: flow.variables\n\n// $zen-auto-include-flow-item-base\n//\n// This variable works the same as [`$zen-auto-include-grid-item-base`](./section-grids.html#zen-auto-include-grid-item-base), except it is used for flow items instead of grid items. You can generate more efficient CSS if you set this to `false` and manually apply the `zen-grid-item-base()` mixin to all flow items from within a single ruleset.\n//\n// ```\n// $zen-auto-include-flow-item-base: true !default;\n// ```\n//\n// Style guide: flow.variables.zen-auto-include-flow-item-base\n$zen-auto-include-flow-item-base: true !default;\n\n\n\n//\n// Layout Module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: layout.variables\n\n// $zen-layouts\n//\n// A map of layout names and their corresponding properties. Any zen grids variable name can be used as a property of a named layout, but the `zen-` prefix should be removed.\n//\n// For example:\n// ```\n// $zen-layouts: (\n//   medium: (\n//     columns: 3,    // Equivalent of $zen-columns for this layout.\n//     gutters: 15px, // Equivalent of $zen-gutters for this layout.\n//   ),\n// );\n// ```\n//\n// When a named layout is given to the `$layout` parameter of one of the layout module's mixins that layout's properties will be used instead of any global variables for the entirety of the mixin's `@content`.\n//\n// ```\n// $zen-layouts: () !default;\n// ```\n//\n// Style guide: layout.variables.zen-layouts\n$zen-layouts: () !default;\n\n\n\n//\n// Background Module\n//\n\n// Configurable variables\n//\n// Zen Grids comes with several configuration variables that affect what CSS its mixins and functions output. The default values of these variables are all set using the “guarded assignment” flag, `!default`. So you can safely set those values before you `@import` Zen Grids and your values will be respected.\n//\n// weight: -10\n//\n// Style guide: background.variables\n\n// $zen-grid-color\n//\n// Specify the color used in the background grid image produced by the `zen-grid-background()` mixin.\n//\n// ```\n// $zen-grid-color: #ffdede !default;\n// ```\n//\n// Style guide: background.variables.zen-grid-color\n$zen-grid-color: #ffdede !default;\n\n// $zen-grid-numbers\n//\n// Specify how to place the column numbers in the background grid image. Normally, column numbers are displayed across the top of the background grid image and then displayed in reverse order along the bottom of the background grid image. Can be set to: `both`, `top`, or `none`.\n//\n// ```\n// $zen-grid-numbers: both !default;\n// ```\n//\n// Style guide: background.variables.zen-grid-numbers\n$zen-grid-numbers: both !default;\n\n// $zen-grid-number-images\n//\n// Specify the set of images used for the numbering of the columns in the background grid image.\n//\n// The default value of the `$zen-grid-number-images` variable is a list of the numbers 1 through 25, each rendered as an image and encoded as a data URI. Users who are crazy enough to use a 26-column grid or larger are free to extend this set.\n//\n// ```\n// $zen-grid-number-images: (url('data:image/png;base64, …), …) !default;\n// ```\n//\n// Style guide: background.variables.zen-grid-number-images\n$zen-grid-number-images: () !default;\n\n// $display-zen-grid-background\n//\n// Specifies whether the background grid image should be displayed.\n//\n// Since the background grid image is only useful during development and during debugging, we need an easy way to turn off the background grid image without removing all the calls to `zen-grid-background()` from the code base. To turn off all background grid images, set `$display-zen-grid-background` to `false`.\n//\n// ```\n// $display-zen-grid-background: true !default;\n// ```\n//\n// Style guide: background.variables.display-zen-grid-background\n$display-zen-grid-background: true !default;\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","// Dependencies.\n// Allow layout-center's margin/padding to override layout-3col.\n@import 'layouts/layout-3col/layout-3col';\n\n// Layout Center\n//\n// All other layouts should be nested inside this centered layout to ensure that\n// content does not get too wide on very large screens.\n//\n// Applying a `.layout-*` class to the same HTML element as `.layout-center`\n// would cause that element's grid to mis-align with the rest of the grid on the\n// page, but this component will automatically detect the other `.layout-*`\n// class and automatically use the `.layout-center--shared-grid` variant\n// instead.\n//\n// .layout-center--shared-grid - If `.layout-center` is applied to the same div\n//   as another .layout-* class, then this variant should be used to prevent the\n//   shared layout's grid from mis-aligning. Note: Each time a new .layout-*\n//   component is created, this component will need to be modified.\n//\n// Markup: layout-center.twig\n//\n// Weight: -1\n//\n// Style guide: layouts.layout-center\n\n.layout-center,\n%layout-center {\n  @include zen-apply-gutter-padding();\n  margin: 0 auto;\n\n  // We wrap the max-width declaration with zen-layout() so we can see the value\n  // of $zen-gutters when it is at the larger \"xl\"-sized media query.\n  @include zen-layout(iPadLandscape) {\n    // The max content width is 1140px (the container width minus the gutters.)\n    max-width: 940px + $zen-gutters;\n  }\n\n  @include zen-respond-to(iPhone8PlusLandscape) {\n    // Since we are using zen-respond-to(), the values in $zen-layouts will\n    // override the global value for $zen-gutters.\n    @include zen-apply-gutter-padding();\n  }\n\n  // Since .layout-center has overridden the negative margin on another\n  // .layout-* container, the grid children will be misaligned due to\n  // .layout-center's gutter padding. So we remove it.\n  &--shared-grid {\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n\n//\n// Fugly selectors.\n//\n\n.layout-center {\n  // Ensure the .layout-center--shared-grid variant is automatically used by\n  // adding all other .layout-* classes here.\n  &.layout-3col {\n    @extend %layout-center--shared-grid;\n  }\n}\n","// The height of the navigation container.\n$layout-swap-height: 2 * $base-line-height;\n\n// Layout swap\n//\n// Uses absolute positioning and selective padding to make 2 elements appear to\n// swap places in the visual order while maintaining their original HTML source\n// order.\n//\n// Markup: layout-swap.twig\n//\n// Style guide: layouts.layout-swap\n\n.layout-swap,\n%layout-swap {\n  position: relative;\n\n  @include respond-to(iPhone5sLandscape) {\n    // Move all the children down to make room for the \"top\" element.\n    padding-top: $layout-swap-height;\n  }\n\n  &__top {\n    @include respond-to(iPhone5sLandscape) {\n      position: absolute;\n      top: 0;\n      height: $layout-swap-height;\n      width: 100%;\n    }\n  }\n}\n"]}