{"version":3,"sources":["forms/form-item/form-item.scss","../node_modules/typey/stylesheets/typey/mixins/_spacing.scss","../node_modules/typey/stylesheets/typey/functions/_helpers.scss","forms/form-item/form-item.css","init/_colors.scss","../node_modules/typey/stylesheets/typey/mixins/_font-size.scss"],"names":[],"mappings":"AA2BA;ECiBE,gBCnCW;ACPb;;AH8BE;;EACE,cIPsC;ADnB1C;;AH8BE;;EKfA,mBHVwB;ACA1B;;AH6BG;;;;EAGG,eAAe;AGzBrB;;AH6BI;;EACE,cAAc;AGzBpB;;AH6BE;;;;;;;EACE,SAAS;AGpBb;;AH2BE;;;;EAEE,eAAe;EACf,mBAAmB;AGtBvB;;AHyBE;;;;;;;;;EAEE,kBAAkB;AGftB;;AH3BA;;;;;;;;;;EA+CI,yBIhDsC;ADyC1C","file":"form-item.css","sourcesContent":["@import 'init';\n\n// Form item\n//\n// Wrapper for a form element (or group of form elements) and its label.\n//\n// .form-item--inline - Inline form items.\n// .form-item--tight  - Packs groups of form items closer together.\n// .is-error          - Highlight the form elements that caused a form\n//                      submission error.\n//\n// Markup: form-item.twig\n//\n// Style guide: forms.form-item\n\n// Form item (radio)\n//\n// Checkboxes and radios require slightly different markup; their label is after\n// their widget instead of before. Uses the `.form-item--radio` class variant of\n// the normal form item and is placed on each of the nested form items.\n//\n// .is-error - Highlight the form elements that caused a form submission error.\n//\n// Markup: form-item--radio.twig\n//\n// Style guide: forms.form-item--radio\n\n.form-item,\n%form-item {\n  @include margin(1 0);\n\n  // The part of the label that indicates a required field.\n  &__required {\n    color: color(form-error);\n  }\n\n  // The descriptive help text (separate from the label).\n  &__description {\n    @include font-size(s);\n  }\n\n  &--inline {\n    div,\n    label {\n      display: inline;\n    }\n\n    // There's always an exception.\n    &__exception {\n      display: block;\n    }\n  }\n\n  &--tight {\n    margin: 0;\n  }\n\n  &--radio {\n    @extend %form-item--tight;\n  }\n\n  &--radio &__label,\n  &--radio__label {\n    display: inline;\n    font-weight: normal;\n  }\n\n  &--radio &__description,\n  &--radio__description {\n    margin-left: 1.4em;\n  }\n\n  &.is-error &__widget,\n  &--is-error__widget {\n    border: 1px solid color(form-error);\n  }\n\n  &.is-error,\n  &--is-error {\n    input,\n    textarea,\n    select {\n      @extend %form-item--is-error__widget;\n    }\n  }\n}\n\n//\n// Drupal selectors.\n//\n\n.form-item {\n  input.error,\n  textarea.error,\n  select.error {\n    @extend %form-item--is-error__widget;\n  }\n\n  .description {\n    @extend %form-item__description;\n  }\n}\n\n.form-required {\n  @extend %form-item__required;\n}\n\n// Password confirmation.\n.password-parent,\n.confirm-parent {\n  @extend %form-item--tight;\n}\n\ntable {\n  .form-item {\n    @extend %form-item--tight;\n  }\n}\n\n.form-type-radio,\n.form-type-checkbox {\n  @extend %form-item--radio;\n\n  .description {\n    @extend %form-item--radio__description;\n  }\n}\n\nlabel.option {\n  @extend %form-item--radio__label;\n}\n\n.container-inline {\n  .form-item {\n    @extend %form-item--inline;\n  }\n\n  // Fieldset contents always need to be rendered as block.\n  .fieldset-wrapper {\n    @extend %form-item--inline__exception;\n  }\n}\n","// Define spacing (with fallbacks).\n//\n// @param string $type\n//   The type of spacing: margin, padding, margin-top, etc.\n// @param number|list|string $spacing\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin spacing($property, $spacing, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\", \"list\";\n  $type: typey-validator($spacing, $allowed-types);\n\n  $px-fallback-list: ();\n  $converted-list: ();\n\n  @each $x in $spacing {\n    @if $base-unit == rem {\n      $allowed-types: \"multiplier\", \"px\", \"auto\";\n      $type: typey-validator($x, $allowed-types);\n      @if $type == \"multiplier\" {\n        $spacing: $x * $base-line-height;\n        $px-fallback-list: join($px-fallback-list, $spacing, $separator: space);\n      }\n      @if $type == \"px\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n      @if $type == \"auto\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n    }\n    $spacing: spacing($x, $context);\n    $converted-list: join($converted-list, $spacing, $separator: space);\n  }\n\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      #{$property}: $px-fallback-list;\n    }\n  }\n  #{$property}: $converted-list;\n}\n\n// Wrapper mixins for various spacing properties.\n// These can be used to provide easily sized spacing in the base unit.\n//\n// @param number|list|string $x\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin margin($x, $context: $base-font-size) {\n  @include spacing(margin, $x, $context);\n}\n@mixin margin-top($x, $context: $base-font-size) {\n  @include spacing(margin-top, $x, $context);\n}\n@mixin margin-bottom($x, $context: $base-font-size) {\n  @include spacing(margin-bottom, $x, $context);\n}\n@mixin margin-left($x, $context: $base-font-size) {\n  @include spacing(margin-left, $x, $context);\n}\n@mixin margin-right($x, $context: $base-font-size) {\n  @include spacing(margin-right, $x, $context);\n}\n@mixin padding($x, $context: $base-font-size) {\n  @include spacing(padding, $x, $context);\n}\n@mixin padding-top($x, $context: $base-font-size) {\n  @include spacing(padding-top, $x, $context);\n}\n@mixin padding-bottom($x, $context: $base-font-size) {\n  @include spacing(padding-bottom, $x, $context);\n}\n@mixin padding-left($x, $context: $base-font-size) {\n  @include spacing(padding-left, $x, $context);\n}\n@mixin padding-right($x, $context: $base-font-size) {\n  @include spacing(padding-right, $x, $context);\n}\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n",".form-item {\n  margin: 1.5rem 0;\n}\n\n.form-item__required,\n.form-required {\n  color: #e41818;\n}\n\n.form-item__description,\n.form-item .description {\n  font-size: 0.875rem;\n}\n\n.form-item--inline div,\n.form-item--inline label,\n.container-inline .form-item div,\n.container-inline .form-item label {\n  display: inline;\n}\n\n.form-item--inline__exception,\n.container-inline .fieldset-wrapper {\n  display: block;\n}\n\n.form-item--tight,\n.form-item--radio,\n.form-type-radio,\n.form-type-checkbox,\n.password-parent,\n.confirm-parent,\ntable .form-item {\n  margin: 0;\n}\n\n.form-item--radio .form-item__label, .form-item--radio__label,\n.form-type-radio .form-item__label,\n.form-type-checkbox .form-item__label,\nlabel.option {\n  display: inline;\n  font-weight: normal;\n}\n\n.form-item--radio .form-item__description, .form-item--radio__description,\n.form-type-radio .form-item__description,\n.form-type-checkbox .form-item__description,\n.form-type-radio .description,\n.form-type-checkbox .description, .form-item--radio .form-item .description, .form-item .form-item--radio .description,\n.form-type-radio .form-item .description,\n.form-item .form-type-radio .description,\n.form-type-checkbox .form-item .description,\n.form-item .form-type-checkbox .description {\n  margin-left: 1.4em;\n}\n\n.form-item.is-error .form-item__widget, .form-item--is-error__widget,\n.form-item.is-error input,\n.form-item.is-error textarea,\n.form-item.is-error select,\n.form-item--is-error input,\n.form-item--is-error textarea,\n.form-item--is-error select,\n.form-item input.error,\n.form-item textarea.error,\n.form-item select.error {\n  border: 1px solid #e41818;\n}\n","// sass-lint:disable indentation, no-color-keywords\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. To learn more,\n// [read the Chroma documentation](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma.twig\n//\n// Weight: -1\n//\n// Style guide: sass.colors\n\n// Define the default color scheme's color names.\n$chroma: define-default-color-scheme('branding', 'The site\\'s main colors. Can be used to define colors in other color schemes.');\n\n$chroma: add-colors((\n  black:                  #111,\n  grey-dark:              ('black' lighten 40%),\n  'grey':                 ('black' lighten 60%),\n  grey-light:             ('black' lighten 80%),\n  grey-extra-light:       ('black' lighten 93.33%),\n  white:                  rgb(240, 240, 240),\n\n  dark-purple:            #201c29,\n  blue:                   #1b7ebb,\n  red:                    rgb(228, 24, 24),\n  yellow:                 rgb(255, 228, 55),\n));\n\n// Define color names for functional uses.\n$chroma: define-color-scheme('functional', 'Colors used by functional parts of the design.');\n$chroma: add-colors('functional', (\n  // Colors used in the main content area.\n  text:                   'white',\n  text-bg:                'dark-purple',\n\n  link:                   'white',\n  link-visited:           ('white' darken 20%),\n  link-active:            'yellow',\n\n  border:                 'grey-light',\n\n  autocomplete:           'black',\n  autocomplete-bg:        'white',\n  autocomplete-select:    'white',\n  autocomplete-select-bg: 'blue',\n\n  body-bg:                'text-bg',\n\n  button:                 'text',\n  button-disabled:        'grey',\n\n  fieldset-summary:       'grey',\n  form-error:             'red',\n\n  mark-highlight:         'red',\n  mark-bg:                'yellow',\n\n  menu-active:            'text',\n\n  preview-bg:             ('yellow' lighten 43%),\n\n  progress-bar:           'blue',\n  progress-bar-bg:        'grey-light',\n  progress-bar-border:    'grey-dark',\n\n  resizable-grippie:      'grey-extra-light',\n\n  row-stripe:             'grey-extra-light',\n  row-disabled:           'grey-light',\n\n  skip-link:              'white',\n  skip-link-bg:           'grey-dark',\n\n  status:                 'blue',\n  status-bg:              (status lighten 62%),\n  status-highlight:       text,\n  warning:                text,\n  warning-bg:             ('yellow' lighten 45%),\n  warning-border:         'yellow',\n  error:                  'red',\n  error-bg:               (error lighten 57%),\n\n  tabs-border:            'border',\n  tabs-bg:                'text-bg',\n  tab:                    'text',\n  tab-text-shadow:        'white',\n  tab-bg:                 ('grey-light' lighten 6.66%),\n  tab-secondary:          'grey-dark',\n\n  table-drag:             ('yellow' lighten 43%),\n  table-select:           ('yellow' lighten 47%),\n\n  watermark:              'grey-extra-light',\n));\n\n$chroma-active-scheme: 'functional';\n","// Define font-size (with fallback)\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      @if $type == \"font-size\" {\n        $map-size: map-get($font-size, $size);\n        font-size: $map-size;\n      }\n      @if $type == \"px\" {\n        font-size: $size;\n      }\n    }\n  }\n  font-size: font-size($size, $context);\n}\n"]}